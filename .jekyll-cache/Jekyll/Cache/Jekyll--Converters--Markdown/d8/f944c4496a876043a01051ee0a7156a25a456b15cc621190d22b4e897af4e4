I"¯D<div class="repo">
  <h3>repositorio de la aplicaci√≥n</h3>
  &lt;a href="https://github.com/railsgirls-cali/instagram-2019&lt;/a&gt;
</div>

<h2 id="ruby-on-rails">RUBY ON RAILS</h2>

<h3 id="qu√©-es-rails">¬øQu√© es Rails?</h3>

<p>Un recordatorio r√°pido sobre Rails.</p>

<p>Rails es un framework de desarrollo de aplicaci√≥nes web escrito en el lenguaje de programaci√≥n Ruby. Est√° dise√±ado para hacer que la programaci√≥n de aplicaci√≥nes web sea m√°s f√°cil, haciendo supuestos sobre lo que cada desarrollador necesita para comenzar. Te permite escribir menos c√≥digo realizando m√°s que muchos otros lenguajes y frameworks. Adem√°s, expertos desarrolladores en Rails reportan que hace que el desarrollo de aplicaciones web sea m√°s divertido.</p>

<p>Rails te permite escribir un buen c√≥digo evitando que te repitas y favoreciendo la convenci√≥n antes que la configuraci√≥n.</p>

<h3 id="convenci√≥n-antes-que-configuraci√≥n">Convenci√≥n antes que configuraci√≥n</h3>

<p>La convenci√≥n antes que la configuraci√≥n es un concepto simple que se utiliza principalmente en la programaci√≥n. Significa que el entorno en el que trabaja (sistemas, bibliotecas, lenguaje ‚Ä¶) asume muchas situaciones l√≥gicas por defecto, por lo que si te adaptas a ellas en lugar de crear tus propias reglas cada vez, la programaci√≥n se convierte en una tarea m√°s f√°cil y productiva.</p>

<p>El objetivo es disminuir el n√∫mero de decisiones que debes tomar como programador y eliminar la complejidad de tener que configurar todas y cada una de las √°reas de desarrollo de aplicaciones. El resultado inmediato es que puedes crear muchas m√°s cosas en menos tiempo.</p>

<p>Los entornos de programaci√≥n altamente exitosos como Ruby on Rails se basan en este concepto. Si sigue las convenciones establecidas, puede desarrollar una aplicaci√≥n Rails en mucho menos tiempo y con muchas menos l√≠neas de c√≥digo de las que necesitar√≠a desarrollar una aplicaci√≥n web en otros lenguajes.</p>

<h3 id="mvc-model-view-controller">MVC (Model, View, Controller)</h3>

<p>En le transcurso de este proyecto vamos a hablar de conceptos de arquitectura y programaci√≥n como vistas o controladores que usa Rails debido a que sigue un patr√≥n de arquitectura que se llama MVC.</p>

<p>El MVC o Modelo-Vista-Controlador es un patr√≥n de arquitectura de software que, utilizando 3 componentes (Vistas, Models y Controladores) separa la l√≥gica de la aplicaci√≥n de la l√≥gica de la vista en una aplicaci√≥n.</p>

<ul>
  <li>
    <p><strong>MODELO</strong> Se encarga de los datos consultando la base de datos. Actualizaciones, consultas, b√∫squedas, etc. todo eso va aqu√≠, en el modelo.</p>
  </li>
  <li>
    <p><strong>CONTROLADOR</strong> Recibe las √≥rdenes del usuario y se encarga de solicitar los datos al modelo y de comunic√°rselos a la vista.</p>
  </li>
  <li>
    <p><strong>VISTAS</strong> Son la representaci√≥n visual de los datos, todo lo que tenga que ver con la interfaz gr√°fica va aqu√≠. Ni el modelo ni el controlador se preocupan de c√≥mo se ver√°n los datos, esa responsabilidad es √∫nicamente de la vista.</p>
  </li>
</ul>

<h2 id="guia">GUIA</h2>

<p>La mejor forma de usar esta gu√≠a es seguir cada paso tal y como se muestra. No hemos ahorrado ninguna l√≠nea de c√≥digo en las explicaciones, as√≠ que puedes seguirla literalmente paso a paso.</p>

<p>Antes de iniciar a programar veremos 2 puntos importantes.</p>

<h3 id="1-consolaterminal">1. consola/terminal</h3>

<p>La interfaz de l√≠nea de comandos, terminal o consola es un m√©todo que permite a los usuarios dar instrucciones a alg√∫n programa inform√°tico por medio de una l√≠nea de texto simple.</p>

<p>Lo primero que debemos saber es que el terminal se utiliza para dar √≥rdenes al sistema mediante unas palabras llamadas comandos de Linux. Estos comandos pueden servir para muchas cosas, como por ejemplo: copiar archivos, comprimir carpetas, reproducir m√∫sica, descargar archivos, etc.</p>

<p>Para que nosotros sepamos que el sistema est√° preparado para recibir √≥rdenes, en el terminal aparecer√° una l√≠nea de texto llamada prompt</p>

<pre><code>$
</code></pre>

<p>Entonces cada vez que vas a encontrar referencia a la <code>consola</code> en la gu√≠a, solo copia el comando y ejec√∫talo en la consola.</p>

<h3 id="2-modificaci√≥n-de-archivos">2. Modificaci√≥n de archivos</h3>

<p>Encontrar√°s referencias como la siguiente para ubicar el archivo que tienes que cambiar</p>

<p><strong>app/views/pages/home.html.erb</strong></p>

<p>Con instrucciones y el codigo que tienes que agregar o cambiar</p>

<pre><code>[...]

codigo

[...]
</code></pre>

<h2 id="inicio">INICIO</h2>

<h2 id="1-crea-una-aplicaci√≥n-nueva">1. Crea una aplicaci√≥n nueva</h2>

<h3 id="vamos-a-crear--una-nueva-aplicaci√≥n-basada-en-instagram">¬°Vamos a crear  una nueva aplicaci√≥n basada en Instagram!</h3>

<p>En la consola</p>

<pre><code class="language-bash">rails new instagram
</code></pre>

<p>Despues de este comando presiona enter y se va a crear una serie de archivos y dependencias organizados en carpetas que conforman la estructura de una aplicaci√≥n Rails</p>

<p>Una vez terminado puedes ver la ultima linea que dice:</p>

<pre><code>Webpacker successfully installed üéâ üç∞
</code></pre>

<p>Despu√©s de crear la aplicaci√≥n, entra a su directorio para continuar trabajando directamente en ella:</p>

<p>En la consola</p>

<pre><code>cd instagram
</code></pre>

<h3 id="el-archivo-gemfile">El archivo Gemfile</h3>

<p>Ahora que creamos este nuevo proyecto con los archivos necesario para iniciar un proyecto de Rails echale una mirada al archivo <strong>Gemfile</strong>.
Este archivo es la base de Rails y donde encontraras las librerias que hacen funcionar nuestra aplicaci√≥n.
Ademas estaremos agregando nueva librerias en el transcurso de este proyecto para agregar nueva funcionalidades a nuestro proyecto.</p>

<h2 id="2-p√°gina-de-inicio">2. P√°gina de inicio</h2>

<p>Una vez que tenemos la primera parte lista podemos ejecutar un nuevo comando en la consola:</p>

<pre><code>rails server
</code></pre>

<p>Eso va a arrancar nuestro servidor de aplicaci√≥n.</p>

<p>Deber√≠as ver algo parecido a:</p>

<pre><code>=&gt; Booting Puma
=&gt; Rails 6.0.0 application starting in development
=&gt; Run `rails server --help` for more startup options
Puma starting in single mode...
* Version 3.12.1 (ruby 2.6.2-p47), codename: Llamas in Pajamas
* Min threads: 5, max threads: 5
* Environment: development
* Listening on tcp://localhost:3000
Use Ctrl-C to stop
</code></pre>

<p>Que significa que nuestra aplicacion ya esta corriendo en el navegador.</p>

<p>En el navegador, ve a la URL: <a href="http://localhost:3000">http://localhost:3000</a> . Esta es la p√°gina de inicio por defecto para las aplicaciones Rails.</p>

<p>La p√°gina ‚ÄúYay! You‚Äôre on Rails!‚Äù es la primera prueba para una nueva aplicaci√≥n Rails. √âsta asegura que tienes el software configurado correctamente para servir una p√°gina.</p>

<h2 id="3-crea-una-primera-p√°gina">3. Crea una primera p√°gina</h2>

<p>Para crear nuestra primera pagina, necesitas crear como m√≠nimo una ruta, un controlador y una vista.</p>

<h3 id="ruta">Ruta</h3>

<p>La ruta define donde se va a encontrar nuestra pagina y quien va a tener responsabilidad de mostrar el contenido.</p>

<h3 id="controlador">Controlador</h3>

<p>Esta responsabilidad es la del controlador
El prop√≥sito de un controlador es recibir las peticiones (requests) de la aplicaci√≥n.</p>

<p>A menudo, hay m√°s de una ruta para cada controlador, y diferentes rutas pueden ser servidas por diferentes acciones (actions). El prop√≥sito de cada acci√≥n es obtener informaci√≥n para pasarla despu√©s a la vista.</p>

<h3 id="vista">Vista</h3>

<p>El prop√≥sito de una vista es mostrar la informaci√≥n en un formato legible para los humanos. Una distinci√≥n importante que hacer es que es el controlador, y no la vista, donde la informaci√≥n es recolectada. La vista s√≥lo deber√≠a mostrar la informaci√≥n. Por defecto, las plantillas de las vistas est√°n escritas en un lenguaje llamado ERB (del ingl√©s, Embedded Ruby), que se procesa autom√°ticamente para cada petici√≥n servida por Rails.</p>

<h3 id="ahora-la-nueva-pagina">Ahora la nueva pagina</h3>

<p>Vamos a crear una pagina de <code>inicio</code> y iniciamos creando un nuevo controlador.</p>

<p>Para crear un nuevo controlador, necesitas ejecutar el generador de controladores y decirle que quieres un controlador llamado por ejemplo <code>pages</code> con una acci√≥n llamada <code>home</code>. Para ello, ejecuta lo siguiente:</p>

<p><strong>NOTA</strong> El primer tab de tu consola ya tiene el servidor de Rails corriendo que lanzaste con el comando:</p>

<pre><code>rails server
</code></pre>

<p>Ahora tienes que abrir un nuevo tab.
En la consola aparecer√° un nuevo prompt <code>$ </code> donde puedes ejecutar:</p>

<p><code>consola</code></p>

<pre><code>rails generate controller pages home
</code></pre>

<p>Rails crear√° una serie de archivos y a√±adir√° una ruta por ti.</p>

<pre><code>create  app/controllers/pages_controller.rb
route  get 'pages/home'
invoke  erb
create    app/views/pages
create    app/views/pages/home.html.erb
invoke  test_unit
create    test/controllers/pages_controller_test.rb
invoke  helper
create    app/helpers/pages_helper.rb
invoke    test_unit
invoke  assets
invoke    scss
create      app/assets/stylesheets/pages.scss
</code></pre>

<p>Estas convenciones que estabamos hablando un poco mas arribas son las que permiten definir lo que se va a crear cada vez que ejecutemos un comando de Rails. Podr√≠amos tambien crear los archivos a mano y escribir el codigo pero Rails se encarga de crear el esqueleto o la estrucutra base para ahorarnos tiempo y implementar buenas practicas basadas en la experiencia colectiva de los desarolladores que contribuyen en proyectos de codigo abiertos como Ruby on Rails.</p>

<p>Los archivos m√°s importantes que acabamos de crear con el generador son por supuesto el controlador, que se encuentra en <strong>app/controllers/pages_controller.rb</strong> y la vista (HTML), que se encuentra en <strong>app/views/pages/home.html.erb</strong>.</p>

<p>Miremos un poco acerca de la convencion que sigue estos archivos.
La mayor√≠a del trabajo en esta guia se llevar√° a cabo en la carpeta <strong>app/</strong>, y vemos que el primer archivo el controlador se creo en una carpeta que se llama <code>controllers</code>, se llama <code>pages_controller.rb</code> y tiene una accion llamada <code>home</code>.</p>

<pre><code class="language-ruby">class PagesController &lt; ApplicationController
  def home
  end
end
</code></pre>

<p>Le coresponde entonces un vista ubicada en el archivo <code>views</code> con el nombre <code>home.html.erb</code> que va a contener la representacion en codigo HTML de lo que queremos mostrar en el navegador.</p>

<p>Y todo no podr√≠a funcionar sin nuestra ruta que tamb√≠en fue a√±adida con el mismo comando
La puedes ver abriendo el archivo <strong>config/routes.rb</strong></p>

<pre><code class="language-ruby">Rails.application.routes.draw do
  get 'pages/home'
  # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
end
</code></pre>

<p><strong>NOTA</strong> El algunos archivos puedes ver un texto que impieza con el numeral <code>#</code>. Este texto hace parte de los comentarios que se estan autogenerando que dan algunas indicaciones a a el usuarios de como seguir la convenciones de Rails.</p>

<h3 id="actualiza-el-texto-en-la-nueva-p√°gina">Actualiza el texto en la nueva p√°gina</h3>

<p>Ahora actualizaremos el archivo de inicio.
Abre el archivo <strong>app/views/pages/home.html.erb</strong> en tu editor de texto y ed√≠talo para que contenga s√≥lo est√° l√≠nea de c√≥digo:</p>

<pre><code class="language-html">&lt;h1&gt;¬°Bienvenidos a Instagram!&lt;/h1&gt;
</code></pre>

<p>En tu navegador, ve a la URL : <a href="http://localhost:3000/pages/home">http://localhost:3000/pages/home</a> y ve la nueva p√°gina que se acaba de crear.</p>

<h3 id="mostrar-la-p√°gina-de-inicio-de-tu-aplicaci√≥n-home">Mostrar la p√°gina de inicio de tu aplicaci√≥n (Home)</h3>

<p>¬øC√≥mo conectar la ra√≠z de tu sitio a un controlador y acci√≥n espec√≠fica?</p>

<p>Debemos configurar la ruta de acceso a la aplicaci√≥n editando el archivo <strong>config/routes.rb</strong>, para esto debemos cambiar la siguiente l√≠nea en el mismo:</p>

<p><strong>config/routes.rb</strong></p>

<p>Reemplazar la l√≠nea</p>

<pre><code class="language-ruby">get 'pages/home'
</code></pre>

<p>‚Ä¶por:</p>

<pre><code class="language-ruby">root 'pages#home'
</code></pre>

<p>Este peque√±o cambio indica a Rails que en la pagina de inicio de nuestra aplicaci√≥n ubicada enla direccion web <a href="http://localhost:3000/">http://localhost:3000/</a> queremos mostrar la pagina <code>home</code>.</p>

<h2 id="4-crea-m√°s-paginas">4. Crea m√°s paginas</h2>

<h3 id="a√±ade-una-nueva-acci√≥n-en-el-controlador">A√±ade una nueva acci√≥n en el controlador</h3>

<p><strong>app/controllers/pages_controller.rb</strong></p>

<pre><code class="language-ruby">class PagesController &lt; ApplicationController
  def home
  end

  def about
  end
end
</code></pre>

<p>Como puedes ver acabamos de agregar debajo de la accion <code>Home</code> una nueva accion <code>about</code>.
As√≠ tenemos la estructura basica de nuestra aplicaci√≥n donde tenemos una pagina de inicio y una nueva pagina <code>about</code> para contar un poco sobre nosotros.</p>

<h3 id="crea-el-siguiente-archivo">Crea el siguiente archivo:</h3>

<p><strong>app/views/pages/about.html.erb</strong></p>

<h4 id="y-agrega-lo-siguiente">y agrega lo siguiente:</h4>

<pre><code class="language-html">&lt;h1&gt;¬øQui√©n soy?&lt;/h1&gt;
&lt;p&gt;¬°Una Rails Girl creando mi propia app de Instagram!&lt;/p&gt;
</code></pre>

<h3 id="vamos-a-agregar-una-nueva-ruta">Vamos a Agregar una nueva ruta</h3>

<p><strong>config/routes.rb</strong></p>

<p>Debajo de</p>

<pre><code class="language-ruby">root 'pages#home'

</code></pre>

<p>A√±ade:</p>

<pre><code class="language-ruby">get 'about' =&gt; 'pages#about'
</code></pre>

<p>Ahora en el navegador puedes visitar nuestras dos paginas:</p>

<ul>
  <li><a href="http://localhost:3000/">http://localhost:3000/</a>: la pagina de inicio</li>
  <li><a href="http://localhost:3000/pages/about">http://localhost:3000/pages/about</a>: la pagina donde encontrar informaci√≥n sobre ti en tu proyecto.</li>
</ul>

<h2 id="5-instalemos-bootstrap">5. ¬°Instalemos Bootstrap!</h2>

<h3 id="a√±ade-bootstrap-con-webpack">A√±ade Bootstrap con Webpack</h3>

<p>Ahora vamos a dedicar un poco de tiempo en configurar toda la parte de Front end de de nuestra aplicaci√≥n por eso vamos a usar un Framework llamado Bootstrap.</p>

<ul>
  <li><strong>Bootstrap</strong> es una biblioteca multiplataforma o conjunto de herramientas de c√≥digo abierto para dise√±o de sitios y aplicaciones web. Contiene plantillas de dise√±o con tipograf√≠a, formularios, botones, cuadros, men√∫s de navegaci√≥n y otros elementos de dise√±o basado en HTML y CSS, as√≠ como extensiones de JavaScript adicionales.
Boostrap facilita la maquetaci√≥n de sitios web y nos ofrece las herramientas para que nuestro sitio web se vea bien en toda clase de dispositivos, ahorrandonos as√≠ el trabajo de tener que redise√±ar un sitio web.
Inicialmente creado como una soluci√≥n interna para twitter y posteriormente liberado al p√∫blico en agosto del 2011 como un proyecto Open Source en GitHub, en los meses siguientes a su liberaci√≥n la comunidad apoy√≥ activamente este proyecto hasta convertirlo en lo que es hoy ‚Äúthe most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web.‚Äù como lo indica en su <a href="p√°gina web">https://getbootstrap.com/</a>.</li>
</ul>

<p>Existe varias manera de integrarar Bootstrap con la parte de Frontend de Rails, es decir todo el codigo Javascript y CSS que se usa en la parte de la vista y que permite renderizar aplicaciones dinamicas en el navegador.
En nuestro ejemplo vamos a ver una de la mas popular que se llama <code>Webpack</code>.</p>

<ul>
  <li><strong>Webpack</strong> es un Module Bundler for modern JavaScript applications, es decir, un empaquetador de m√≥dulos para aplicaciones modernas hechas en JavaScript.</li>
</ul>

<p>Una aplicaci√≥n web lleva m√∫ltiples tipos de assets como im√°genes, fuentes personalizadas, JSON, CSS, JavaScript, etc. y manejar esto se vuelve un dolor de cabeza a medida que nuestra aplicaci√≥n tiene √©xito y va creciendo. Todo esto lo resuelve Webpack y es por eso que ser√° nuestro empaquetador de m√≥dulos (o Module Mundler).</p>

<p>Tener una aplicaci√≥n organizada va a ayudarte a llevar un correcto manejo de versiones de tu c√≥digo. Tambi√©n necesitar√°s organizar carpetas llenas de archivos en toda clase de extensiones y separar las que se usan en entornos de desarrollo, como las que se usar√°n en producci√≥n. Esto lo hace Webpack de manera f√°cil, solo debes decirle d√≥nde est√° el archivo fuente y a d√≥nde quieres enviar el o los archivos resultantes.</p>

<h3 id="paso-a-paso">Paso a paso</h3>

<p>El primero comando que vamos a utlizar es</p>

<p><code>consola</code></p>

<pre><code>yarn add bootstrap jquery popper.js
</code></pre>

<p>Acabamos de instalar los paquetes y dependecias de Bootstrap. Ahora solo falta configurarlo dentro de rails</p>

<p>En <strong>config/webpack/environment.js</strong> agrega lo siguiente:</p>

<pre><code class="language-js">const { environment } = require('@rails/webpacker')

const webpack = require('webpack')
environment.plugins.append('Provide', new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))

module.exports = environment
</code></pre>

<p>La primera y ultima linea ya esta en este archivo as√≠ que asegurate que el archivo contiene este codigo.</p>

<p>Ahora en <strong>app/javascript/packs/application.js</strong> y debajo de <code>require("channels")</code>  agrega lo siguiente:</p>

<pre><code>import 'bootstrap'
import '../stylesheets/application'
</code></pre>

<p>Crea la carpeta <strong>app/javascript/stylesheets</strong> con el archivo <code>application.scss</code> y agraga:</p>

<pre><code>@import '~bootstrap/scss/bootstrap';
</code></pre>

<p>Finalmente falta solamente abrir el archivo  <strong>app/views/layouts/application.html.erb</strong> y debajo de:</p>

<pre><code class="language-rhtml">&lt;%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %&gt;
</code></pre>

<p>agregar:</p>

<pre><code class="language-rhtml">&lt;%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %&gt;
</code></pre>

<p>De pronto te diste cuenta que estamos usando un archivo con una extension <code>.scss</code>. Este tipo de archivo es para manejar un tipo de CSS que se llama SASS.</p>

<ul>
  <li><strong>Sass</strong> (acr√≥nimo de Syntactically Awesome StyleSheets) es una extensi√≥n de CSS que a√±ade caracter√≠sticas muy potentes y elegantes a este lenguaje de estilos. Sass permite el uso de variables, reglas CSS anidadas, mixins, importaci√≥n de hojas de estilos y muchas otras caracter√≠sticas, al tiempo que mantiene la compatibilidad con CSS.</li>
</ul>

<h2 id="6-a√±ade-elementos-de-bootstrap-a-la-p√°gina">6. A√±ade elementos de Bootstrap a la p√°gina</h2>

<h3 id="a√±ade-un-contenedor-a-tu-aplicaci√≥n">¬°A√±ade un contenedor a tu aplicaci√≥n!</h3>

<p><strong>views/layouts/application.html.erb</strong></p>

<p>Dentro de la etiqueta <code>&lt;body&gt;</code>, reemplaza</p>

<pre><code class="language-rhtml">&lt;%= yield %&gt;
</code></pre>

<p>por‚Ä¶</p>

<pre><code class="language-rhtml">&lt;div class="container"&gt;
  &lt;%= yield %&gt;
&lt;/div&gt;
</code></pre>

<h3 id="crea-un-parcial-de-encabezado">Crea un parcial de encabezado</h3>

<p>Por convenci√≥n un parcial es un archivo de plantilla cuyo nombre empieza por un guion bajo y cuyo contenido se reutiliza en varias plantillas diferentes. Aqu√≠ el encabezado es un ejemplo de contenido que se repite en varias p√°ginas.</p>

<p>Crea el archivo <strong>app/views/layouts/_header.html.erb</strong></p>

<h3 id="a√±ade-la-barra-de-navegaci√≥n">A√±ade la barra de navegaci√≥n</h3>

<p><strong>app/views/layouts/_header.html.erb</strong></p>

<pre><code class="language-rhtml">&lt;nav class="navbar navbar-expand-lg "&gt;
  &lt;div class="container"&gt;
    &lt;%= link_to "Instagram", root_path, class: "navbar-brand" %&gt;
    &lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
      &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
      &lt;ul class="navbar-nav ml-auto"&gt;
        &lt;li class="nav-item"&gt;
          &lt;%= link_to "Home", root_path, class: "nav-link" %&gt;
        &lt;/li&gt;
        &lt;li class="nav-item"&gt;
          &lt;%= link_to "Qui√©nes somos", about_path, class: "nav-link" %&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/nav&gt;
</code></pre>

<p><strong>NOTA</strong> <strong>Embedded Ruby?</strong> ‚Äì <strong>¬øRuby embebido?</strong></p>

<p>En Ruby se usa mucho ERB como sistema de plantillas para crear archivos HTML con c√≥digo Ruby embebido.</p>

<p>En HTML, un enlace es as√≠:</p>

<pre><code class="language-html">&lt;a href="#"&gt; aqu√≠ &lt;/a&gt;
</code></pre>

<p>Estas son etiquetas de Ruby:</p>

<pre><code class="language-erb">&lt; % = % &gt;
</code></pre>

<p>En Ruby on Rails un enlace se ver√° as√≠:</p>

<pre><code class="language-erb">&lt;%= link_to "aqu√≠", "#" %&gt;
</code></pre>

<h3 id="a√±ade-el-parcial-de-encabezado-a-la-p√°gina-de-inicio">A√±ade el parcial de encabezado a la p√°gina de inicio</h3>

<p><strong>app/views/layouts/application.html.erb</strong></p>

<p>Despu√©s de la etiqueta <code>&lt;body&gt;</code> inserta:</p>

<pre><code class="language-erb">&lt;%= render 'layouts/header' %&gt;
</code></pre>

<h3 id="a√±ade-el-contenido-del-home">A√±ade el contenido del home</h3>

<p>Reemplaza todo el contenido del archivo</p>

<p><strong>views/pages/home.html.erb</strong></p>

<pre><code class="language-rhtml">&lt;div class="jumbotron text-center"&gt;
  &lt;h2&gt;¬°Bienvenidos a Instagram!&lt;/h2&gt;
  &lt;p&gt;
   &lt;%= link_to "Iniciar sesi√≥n", "#", class: "btn btn-default btn-lg" %&gt;
   &lt;%= link_to "Reg√≠strate", "#", class: "btn btn-primary btn-lg" %&gt;
  &lt;/p&gt;    
&lt;/div&gt;
</code></pre>

<h2 id="8-personalicemos-bootstrap">8. Personalicemos Bootstrap</h2>

<h3 id="cambios-de-estilo">Cambios de estilo</h3>

<p>Ahora agregamos un poco de estilos CSS (<em>usando SASS</em>).</p>

<p><strong>app/javascript/stylesheets/application.scss</strong></p>

<p>Reemplaza:</p>

<pre><code class="language-scss">@import '~bootstrap/scss/bootstrap';
</code></pre>

<p>por los siguientes estilos:</p>

<pre><code class="language-scss">@import url(http://fonts.googleapis.com/css?family=Lato:400,700);
@import url(http://fonts.googleapis.com/css?family=Oleo+Script);

$body-bg:                          #fafafa !important;
$font-family-sans-serif:           'Lato', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$primary:                          #3897F0;
$jumbotron-bg:                     white;

@import '~bootstrap/scss/bootstrap';

.navbar {
  background-color: #fff;
  font-weight: bold;
  height: 77px;
  border-bottom: 1px solid #dbdbdb;
}

.navbar-brand {
  font-family: 'Oleo Script', cursive;
  font-size: 25px;
  color: #262626;
}

.navbar-nav {
  font-weight: bold;
}
</code></pre>

<h2 id="9-a√±adir-devise-para-autenticaci√≥n-de-usuarios">9. A√±adir Devise para Autenticaci√≥n de usuarios</h2>

<h3 id="a√±ade-la-gema-de-devise">A√±ade la gema de Devise</h3>

<p><em>‚ÄúLas gemas en Ruby son las bibliotecas o paquetes (c√≥digo Ruby empaquetado de una manera predeterminada) de software que se instalan en el sistema para aumentar las funcionalidades del interprete‚Äù</em>.</p>

<p>La mayoria de las aplicaciones web necesitan que los usuarios puedan crear una cuenta, modificar su perfil, iniciar y cerrar sesi√≥n. En el contexto de rails hay una gema que se integra naturalmente con √©l y gestiona estos componentes; esta gema se llama Devise.</p>

<p><strong>/Gemfile</strong></p>

<p>Debajo de <code>'bootsnap', '&gt;= 1.4.2', require: false</code> a√±ade la gema de Devise.</p>

<pre><code class="language-ruby">[...]
gem 'devise'
[...]
</code></pre>

<h3 id="siempre-pare-el-servidor-con-control--c-y-corre-bundle-install-para-instalar-una-nueva-gema">Siempre pare el servidor con <code>CONTROL + C</code> y corre <code>bundle install</code> para instalar una nueva gema</h3>

<p>Ejecuta bundle install para instalarla</p>

<p><code>consola</code></p>

<pre><code class="language-bash">CONTROL + C
bundle install
</code></pre>

<h3 id="vuelve-a-iniciar-el-servidor">Vuelve a iniciar el servidor</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">rails server
</code></pre>

<h2 id="10-configuraci√≥n-de-devise">10. Configuraci√≥n de Devise</h2>

<p><strong>NOTA</strong> El primer tab de tu consola todav√≠a tiene el servidor de Rails corriendo.
Sigue usando el otro tab.</p>

<h3 id="instala-devise">Instala Devise</h3>

<p>Ejecuta el generador de Devise:</p>

<p><code>consola</code></p>

<pre><code class="language-bash">rails generate devise:install
</code></pre>

<p>Acabamos de crear los archivos necesario para la configuracion de Devise.
Ademas Devise nos deja una serie de recomendaciones sobre buenas practicas y configuraciones adicionales de la gema. Ahora podemos crear las vistas.</p>

<h3 id="crea-las-vistas-de-devise">Crea las vistas de Devise</h3>

<p>Generar las vistas para la personalizaci√≥n del manejo de sesiones de usuario.
Estas vistas coresponden a las que necesitamos para iniciar y cerrar session, manejar registras de usuarios, cambio de contrase√±a‚Ä¶etc</p>

<p><code>consola</code></p>

<pre><code>rails g devise:views
</code></pre>

<p>Y vemos que Rails acaba de crear varios archivos nuevos en nuestra aplicaci√≥n.</p>

<h3 id="crea-un-modelo-de-usuario">Crea un modelo de usuario</h3>

<p>Los modelos en Rails usan un nombre en singular, y sus correspondientes tablas de base de datos usan un nombre en plural. Rails provee un generador para crear modelos, el cual la mayor√≠a de desarrolladores en Rails tienden a usar para crear nuevos modelos. En nustro caso Devise ofrece un generador especifico que crea el modelo de usuario definiendo la base de nustro sistema de autenticaci√≥n.</p>

<p><code>consola</code></p>

<pre><code class="language-bash">rails generate devise User
</code></pre>

<p>Esta l√≠nea crea un modelo de usuario y un nuevo archivo: <strong>app/models/user.rb</strong></p>

<p>Ve a <strong>db/migrate</strong> y deber√≠as tener en los archivos algo as√≠ como <strong>db/migrate/20191021001811_devise_create_users.rb</strong></p>

<p>El n√∫mero es la fecha de creac√≠on.</p>

<h3 id="migra-la-base-de-datos">Migra la base de datos</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">rails db:migrate
</code></pre>

<p>Este comando toma el archivo de migraci√≥n y lo ejecuta, de manera que genere tablas en la base de datos.</p>

<p><strong>NOTA</strong>
Las migraciones nos permiten hacer cambios sobre el esquema de la base de datos de forma iterativa y consistente.
Una migraci√≥n es un archivo que se crea dentro de la carpeta <strong>db/migrate</strong> y que contiene instrucciones para modificar el esquema de la base de datos (crear tablas, agregar columnas, eliminar columnas, eliminar tablas, etc.).
Cuando creas un modelo desde la l√≠nea de comandos con el generador de Rails, autom√°ticamente se crea una migraci√≥n con las instrucciones para crear la tabla.</p>

<h3 id="vuelve-a-iniciar-el-servidor-1">Vuelve a iniciar el servidor</h3>

<pre><code class="language-bash">CONTROL + C (para parar el servidor)
rails server (para volver a iniciar el servidor)
</code></pre>

<p>Tendr√°s que reiniciar la aplicaci√≥n cada vez que instales una gema o cada vez que ejecutes <code>rails db:migrate</code></p>

<h2 id="11-mensajes-flash">11. Mensajes flash</h2>

<p>Los mensajes flash son los mensajes en sitios web que dicen ‚ÄúGracias por registrarse en ‚Ä¶‚Äù o ‚ÄúGracias por suscribirse a ‚Ä¶‚Äù</p>

<p><strong>app/views/layouts/application.html.erb</strong></p>

<p>Agrega lo siguiente Debajo de <code>&lt;div class="container"&gt;</code> y antes de <code>&lt;%= yield %&gt;</code>:</p>

<pre><code class="language-rhtml">
&lt;% flash.each do |name, msg| %&gt;
  &lt;% if msg.is_a?(String) %&gt;
    &lt;div class="alert alert-&lt;%= name.to_s == 'notice' ? 'success' : 'danger' %&gt; fade in"&gt;
      &lt;button type="button" class="close" data-dismiss="alert" aria-hidden="true"&gt;&amp;times;&lt;/button&gt;
      &lt;%= content_tag :div, msg, :id =&gt; "flash_#{name}" %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
&lt;% end %&gt;

</code></pre>

<h2 id="12-registrar-nuevos-usuarios-o-iniciar-sesi√≥n">12. Registrar nuevos usuarios o iniciar sesi√≥n</h2>

<h3 id="modifica-la-vista-de-inicio">Modifica la vista de inicio</h3>

<p><strong>app/views/pages/home.html.erb</strong></p>

<p>¬°Actualicemos la p√°gina de inicio!</p>

<pre><code class="language-rhtml">&lt;div class="jumbotron text-center"&gt;
 &lt;h2&gt;¬°Bienvenidos a Instagram!&lt;/h2&gt;
 &lt;% if user_signed_in? %&gt;
      # haz algo
 &lt;% else %&gt;
   &lt;p&gt;
     &lt;%= link_to "Iniciar sesi√≥n", new_user_session_path, class: "btn btn-default btn-lg" %&gt;
     &lt;%= link_to "Reg√≠strate", new_user_registration_path, class: "btn btn-primary btn-lg" %&gt;
   &lt;/p&gt;
  &lt;% end %&gt;  
&lt;/div&gt;
</code></pre>

<h3 id="modifica-el-parcial-de-navegaci√≥n">Modifica el parcial de navegaci√≥n</h3>

<p><strong>app/views/layout/_header.html.erb</strong></p>

<p>Reemplaza</p>

<pre><code class="language-rhtml">&lt;ul class="navbar-nav ml-auto"&gt;
  &lt;li class="nav-item"&gt;
    &lt;%= link_to "Home", root_path, class: "nav-link" %&gt;
  &lt;/li&gt;
  &lt;li class="nav-item"&gt;
    &lt;%= link_to "Qui√©nes somos", about_path, class: "nav-link" %&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>por</p>

<pre><code class="language-rhtml">&lt;ul class="navbar-nav ml-auto"&gt;
  &lt;li class="nav-item"&gt;
    &lt;%= link_to "Home", root_path, class: "nav-link" %&gt;
  &lt;/li&gt;
  &lt;li class="nav-item"&gt;
    &lt;%= link_to "Qui√©nes somos", about_path, class: "nav-link" %&gt;
  &lt;/li&gt;
  &lt;% if user_signed_in? %&gt;
    &lt;li class="nav-item"&gt;
      &lt;%= link_to "Cerrar sesi√≥n", destroy_user_session_path, class: "nav-link", method: :delete %&gt;
    &lt;/li&gt;
  &lt;% else %&gt;
    &lt;li class="nav-item"&gt;
      &lt;%= link_to "Reg√≠strate", new_user_registration_path, class: "nav-link" %&gt;
    &lt;/li&gt;
    &lt;li class="nav-item"&gt;
      &lt;%= link_to "Iniciar sesi√≥n", new_user_session_path, class: "nav-link" %&gt;
    &lt;/li&gt;
  &lt;% end %&gt;
&lt;/ul&gt;
</code></pre>

<p><strong>NOTA</strong> Usa el tabulador, la tecla Tab (Tab ‚Üπ) nos permite indentar el texto que este en nuestra selecci√≥n y as√≠ mantener el c√≥digo organizado y indentado.</p>

<h2 id="13-cambia-las-vistas-de-devise">13. Cambia las vistas de Devise</h2>

<p>Cunado corrimos el comando <code>rails g devise:views</code> el generador creo un serie de vistas con formularios responsable del registro de usuario, el inicio de sesion etc.
Todos estas vistas est√°n ubicadas dentro de la carpeta <strong>app/views/devise</strong>.
Ahora vamos a mejorar un poco estos archvos agregando CSS de Bootstrap.</p>

<h3 id="reemplaza-el-c√≥digo-para-cada-una-de-las-vistas-de-devise">Reemplaza el c√≥digo para cada una de las vistas de Devise</h3>

<p><strong>app/views/devise/registrations/new.html.erb</strong></p>

<p><em>Esta vista se encarga del formulario de registro de usuarios en tu app.</em></p>

<pre><code class="language-rhtml">&lt;div class="form-wrapper"&gt;
  &lt;h1&gt;Reg√≠strate&lt;/h1&gt;

  &lt;%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %&gt;
    &lt;%= devise_error_messages! %&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :email %&gt;
      &lt;%= f.email_field :email, autofocus: true, class: "form-control" %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :password %&gt;
      &lt;%= f.password_field :password, class: "form-control" %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.submit "Reg√≠strate", class: "btn btn-success" %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="form-group text-center"&gt;
    &lt;%= render "devise/shared/links" %&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><strong>app/views/devise/registrations/edit.html.erb</strong></p>

<p><em>Esta vista se encarga del formulario de edici√≥n de la informaci√≥n de usuarios en tu app.</em></p>

<pre><code class="language-rhtml">&lt;div class="form-wrapper"&gt;
  &lt;h1&gt;Editar &lt;%= resource_name.to_s.humanize %&gt;&lt;/h1&gt;

  &lt;%= form_for(resource, :as =&gt; resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %&gt;
    &lt;%= devise_error_messages! %&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :email %&gt;
      &lt;%= f.email_field :email, class: "form-control", autofocus: true %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :password %&gt; &lt;i&gt;(d√©jala en blanco si no quieres cambiarla)&lt;/i&gt;
      &lt;%= f.password_field :password, class: "form-control", autocomplete: "off" %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :current_password %&gt; &lt;i&gt;(necesitamos tu contrase√±a actual para confirmar los cambios)&lt;/i&gt;
      &lt;%= f.password_field :current_password, class: "form-control" %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.submit "Actualizar", class: "btn btn-success" %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;h3&gt;Cancelar mi cuenta&lt;/h3&gt;

  &lt;p&gt;Unhappy? &lt;%= button_to "Cancelar mi cuenta", registration_path(resource_name), data: { confirm: "¬øEst√°s segura/o?" }, method: :delete, class: "btn btn-warning" %&gt;&lt;/p&gt;

  &lt;%= link_to "Volver", :back %&gt;
&lt;/div&gt;
</code></pre>

<p><strong>app/views/devise/passwords/new.html.erb</strong></p>

<p><em>Esta vista est√° encargada de mostrar el formulario para la solicitud de contrase√±a al sistema en caso de olvido.</em></p>

<pre><code class="language-rhtml">&lt;div class="form-wrapper"&gt;
  &lt;h1&gt;¬øOlvidaste tu contrase√±a?&lt;/h1&gt;

  &lt;%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :post }) do |f| %&gt;
    &lt;%= devise_error_messages! %&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :email %&gt;
      &lt;%= f.email_field :email, class: "form-control", autofocus: true %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.submit "Env√≠ame las instrucciones para restablecer mi contrase√±a", class: "btn btn-success" %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="form-group text-center"&gt;
    &lt;%= render "devise/shared/links" %&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><strong>app/views/devise/passwords/edit.html.erb</strong></p>

<p><em>En esta vista se encuentra el formulario para el cambio de la contrase√±a de un usuario de tu app</em></p>

<pre><code class="language-rhtml">&lt;div class="form-wrapper"&gt;
  &lt;h1&gt;Cambia tu contrase√±a&lt;/h1&gt;

  &lt;%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :put }) do |f| %&gt;
    &lt;%= devise_error_messages! %&gt;
    &lt;%= f.hidden_field :reset_password_token %&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :password, "Nueva contrase√±a" %&gt;
      &lt;%= f.password_field :password, class: "form-control", autofocus: true %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :password_confirmation, "Confirmar nueva contrase√±a" %&gt;
      &lt;%= f.password_field :password_confirmation %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.submit "Cambiar mi contrase√±a", class: "btn btn-success" %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="form-group text-center"&gt;
    &lt;%= render "devise/shared/links" %&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><strong>app/views/devise/sessions/new.html.erb</strong></p>

<p><em>¬°Este es el formulario de login (inicio de sesi√≥n) de tu Instagram app!</em></p>

<pre><code class="language-rhtml">&lt;div class="form-wrapper"&gt;
  &lt;h1&gt;Iniciar Sesion&lt;/h1&gt;
  &lt;%= form_for(resource, :as =&gt; resource_name, :url =&gt; session_path(resource_name)) do |f| %&gt;
    &lt;div class="form-group"&gt;
      &lt;%= f.label :email %&gt;
      &lt;%= f.email_field :email, class: "form-control", autofocus: true %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.label :password %&gt;
      &lt;%= f.password_field :password, class: "form-control" %&gt;
    &lt;/div&gt;

    &lt;div class="checkbox"&gt;
      &lt;%= f.check_box :remember_me %&gt;
      &lt;%= f.label :remember_me %&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
      &lt;%= f.submit "Ingresa", class: "btn btn-success" %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="form-group text-center"&gt;
    &lt;%= render "devise/shared/links" %&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h3 id="a√±ade-estos-estilos-para-que-tus-formularios-se-vean-m√°s-geniales-3">A√±ade estos estilos para que tus formularios se vean m√°s geniales &lt;3</h3>

<p>Al final del archivo: <strong>app/javascript/stylesheets/application.scss</strong></p>

<pre><code class="language-css">.form-wrapper {
  width: 60%;
  margin: 20px auto;
  background-color: #fff;
  padding: 40px;
  border: 1px solid #eeefef;
  border-radius: 3px;
}
</code></pre>

<h3 id="a√±ade-un-enlace-mi-cuenta-al-parcial-de-navegac√≠on">A√±ade un enlace ‚ÄúMi cuenta‚Äù al parcial de navegac√≠on</h3>

<p><strong>app/views/layouts/_header.html.erb</strong></p>

<p>Debajo de <code>&lt;% if user_signed_in? %&gt;</code>:</p>

<pre><code class="language-rhtml">&lt;li class="nav-item"&gt;
  &lt;%= link_to "Mi cuenta", edit_user_registration_path, class: "nav-link" %&gt;
&lt;/li&gt;

</code></pre>

<p>Ya tenemos todo un sistema de registro, autenticacion de usuarios con notificaciones super poderoso. Si quieres conocer mas acerca de como configurar y usar Devise mas alla de esta guia encontraras un enlace al final de la guia.</p>

<h2 id="14-genera-el-scaffold-para-posts">14. Genera el scaffold para Posts</h2>

<p><code>Posts</code> ser√°n nuestras publicaciones o, mejor dicho, ¬°Las im√°genes que publicamos en nuestro Instagram!</p>

<h3 id="genera-un-scaffold-para-posts">Genera un scaffold para Posts</h3>

<p>Un scaffold es un generador autom√°tico de modelo + controlador + vistas.
Scaffold significa andamio en ingl√©s. Es un generador de c√≥digo el cual nos permite tener las funcionalidades b√°sicas de administraci√≥n de un modelo, es decir el CRUD (Create, Read, Update, Delete), y que son t√≠picas para cualquier sistema transaccional. Entonces ya tendremos dos modelo de datos, uno para los usuarios que creamos con Devise y ahora sus respectivos posts utilizando el generador de c√≥digo scaffold.</p>

<p><code>consola</code></p>

<pre><code class="language-bash">rails generate scaffold posts description:string
</code></pre>

<p>Con este comando le estamos diciendo a Rails de crear un scaffold <code>posts</code> con un campo <code>description</code> que es de tipo <code>string</code>. Por ahora nustra publicaci√≥n de Instagram solo tiene una descripci√≥n.
Usando scaffold hemos creado todo el c√≥digo necesario para un CRUD, √©ste nos ha creado los modelos, controladores, vistas, assets, rutas y las migraciones.</p>

<p>Hablando de migraciones, ahora tenemos que ejecutar la migraci√≥n.</p>

<p><code>consola</code></p>

<pre><code class="language-bash">rails db:migrate
</code></pre>

<p><strong>NOTA</strong>
Las migraciones nos permiten hacer cambios sobre el esquema de la base de datos de forma iterativa y consistente.
Una migraci√≥n es un archivo que se crea dentro de la carpeta <strong>db/migrate</strong> y que contiene instrucciones para modificar el esquema de la base de datos (crear tablas, agregar columnas, eliminar columnas, eliminar tablas, etc.).
Cuando creas un modelo desde la l√≠nea de comandos con el generador de Rails, autom√°ticamente se crea una migraci√≥n con las instrucciones para crear la tabla.</p>

<p><strong>IMPORTANTE</strong>
El scaffold tambi√©n crea un archivo de estilos CSS basicos pero nosotros vamos a usar nuestro propio CSS as√≠ que podemos borrar este archivo para no interferir con nuestros estilos.</p>

<p>Borra <strong>/app/assets/stylesheets/scaffolds.scss</strong>.</p>

<h2 id="15-simplifiquemos-el-controlador-de-posts">15. Simplifiquemos el controlador de Posts</h2>

<p><strong>app/controllers/posts_controller.rb</strong></p>

<h3 id="reemplaza-todo-el-contenido-del-controlador">Reemplaza todo el contenido del controlador</h3>

<pre><code class="language-ruby">class PostsController &lt; ApplicationController
  before_action :set_post, only: [:show, :edit, :update, :destroy]

  def index
    @posts = Post.all
  end

  def show
  end

  def new
    @post = Post.new
  end

  def edit
  end

  def create
    @post = Post.new(post_params)
    if @post.save
      redirect_to @post, notice: '¬°Post creado satisfactoriamente!'
    else
      render :new
    end
  end

  def update
    if @post.update(post_params)
      redirect_to @post, notice: '¬°Post actualizado satisfactoriamente!'
    else
      render :edit
    end
  end

  def destroy
    @post.destroy
    redirect_to posts_url
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_post
      @post = Post.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:description)
    end
end
</code></pre>

<h2 id="16-las-vistas-de-posts">16. Las vistas de posts</h2>

<h3 id="esto-se-llama-el-parcial-formulario">Esto se llama el parcial ‚Äúformulario‚Äù</h3>

<p>Las plantillas parciales (partials) son una forma de dividir el proceso de representaci√≥n en partes m√°s manejables. Los parciales permiten extraer fragmentos de c√≥digo de sus plantillas en archivos separados y tambi√©n reutilizarlos en todas sus plantillas.
Los parciales tienen como prefijo un subrayado, de manera de no confundirlas con vistas regulares</p>

<p>Modifica el parcial del formulario <strong>apps/views/posts/_form.html.erb</strong></p>

<p>Reemplaza todo el contenido por:</p>

<pre><code class="language-rhtml">&lt;h1&gt;Crear un post&lt;/h1&gt;
&lt;%= form_for(@post) do |f| %&gt;
  &lt;% if @post.errors.any? %&gt;
    &lt;div class="alert alert-danger alert-dismissable"&gt;&lt;button aria-hidden="true" class="close" data-dismiss="alert" type="button"&gt;√ó&lt;/button&gt;
      &lt;ul class="list-unstyled"&gt;
        &lt;% @post.errors.full_messages.each do |msg| %&gt;
          &lt;%= content_tag :li, msg, :id =&gt; "error_#{msg}" if msg.is_a?(String) %&gt;
        &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="form-group"&gt;
    &lt;%= f.label :description %&gt;
    &lt;%= f.text_field :description, class: "form-control" %&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;%= f.submit class: "btn btn-primary" %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<h3 id="para-mantener-nuestros-estilos-tendremos-el-contenido-de-las-siguientes-vistas-dentro-de-un-form-wrapper">Para mantener nuestros estilos, tendremos el contenido de las siguientes vistas dentro de un form-wrapper</h3>

<p>Cambia todo lo que hay en este archivos: <strong>app/views/posts/new.html.erb</strong> por:</p>

<pre><code class="language-rhtml">&lt;div class="form-wrapper"&gt;
  &lt;h2&gt;Crear un post&lt;/h2&gt;
  &lt;%= render 'form' %&gt;
&lt;/div&gt;
</code></pre>

<p>Y lo que hay en este archivo <strong>app/views/posts/edit.html.erb</strong> por</p>

<pre><code class="language-rhtml">&lt;div class="form-wrapper"&gt;
  &lt;h2&gt;Actualizar un post&lt;/h2&gt;
  &lt;%= render 'form' %&gt;
&lt;/div&gt;
</code></pre>

<h3 id="a√±ade-un-enlace-en-el-navbar-barra-de-navegaci√≥n-para-crear-un-nuevo-post">A√±ade un enlace en el navbar (barra de navegaci√≥n) para crear un nuevo post</h3>

<p><strong>app/views/layouts/_header.html.erb</strong></p>

<p>Debajo de <code>&lt;% if user_signed_in? %&gt;</code>:</p>

<pre><code class="language-rhtml">&lt;li class="nav-item"&gt;
  &lt;%= link_to 'Nuevo post', new_post_path, class: "nav-link"%&gt;
&lt;/li&gt;
</code></pre>

<h3 id="redireccionamos-la-ra√≠z-de-nuestra-aplicaci√≥n-al-index-de-posts">Redireccionamos la ra√≠z de nuestra aplicaci√≥n al <code>index</code> de Posts</h3>

<h5 id="no-te-diremos-en-qu√©-archivo-es-un-desaf√≠o---si-tienes-dudas-preg√∫ntale-a-uno-de-tus-mentores-">(no te diremos en qu√© archivo, es un desaf√≠o ;) , si tienes dudas, ¬°Preg√∫ntale a uno de tus mentores! )</h5>

<p>reemplaza <code>root 'pages#home'</code> por <code>root 'posts#index'</code></p>

<h2 id="17-posts-usuarios-y-asociaciones">17. Posts, Usuarios y Asociaciones</h2>

<h3 id="asociaciones">Asociaciones</h3>

<p>Las asociaciones se utilizan para definir relaciones entre tablas de una base de datos. Existen dos tipos de asociaciones que se pueden modelar en una base de datos relacional:</p>
<ul>
  <li>One to many (uno a muchos)</li>
  <li>Many to many (muchos a muchos)</li>
</ul>

<p>En nustro ejemplo usaremos One to many (uno a muchos)</p>

<h3 id="one-to-many">One to many</h3>

<p>En una relaci√≥n uno a muchos cada registro de una tabla est√° relacionado a un registro de otra tabla.
Por ejemplo, imagina que cada publicaci√≥n pertenece a un usuario.</p>

<h3 id="configura-tus-asociaciones">Configura tus asociaciones</h3>

<p>Un Post <code>belongs_to</code> un Usuario.
Una Publicaci√≥n <strong><em>pertenece</em></strong> a un Usuario.</p>

<p>En el model <code>Post</code> <strong>app/models/post.rb</strong> remplaza el contenido por:</p>

<pre><code class="language-ruby">class Post &lt; ActiveRecord::Base
	belongs_to :user
end
</code></pre>

<h3 id="genera-una-nueva-migraci√≥n-de-√≠ndice-de-un-usuario">Genera una nueva migraci√≥n de √≠ndice de un usuario</h3>
<p><br />
Esto significa que cada publicaci√≥n estar√° relacionada con un usuario.</p>

<p><code>consola</code></p>

<pre><code class="language-bash">rails generate migration add_user_id_to_posts user_id:integer:index
</code></pre>

<p>Y despues</p>

<pre><code class="language-bash">rails db:migrate
</code></pre>
<ul>
  <li>
    <h5 id="recuerda-que-hacemos-rails-dbmigrate-porque-acabamos-de-crear-una-migraci√≥n">Recuerda que hacemos <code>rails db:migrate</code> porque acabamos de crear una migraci√≥n.</h5>
  </li>
  <li>
    <h5 id="cada-vez-que-hagas-una-migraci√≥n-debes-reiniciar-el-servidor-de-rails">Cada vez que hagas una migraci√≥n, debes reiniciar el servidor de Rails.</h5>
  </li>
</ul>

<p><code>consola</code></p>

<pre><code class="language-bash">CONTROL + C (para parar el servidor)
rails server (para volver a iniciar el servidor)
</code></pre>

<h3 id="un-usuario-has_many-posts">Un Usuario <code>has_many</code> Posts</h3>

<h5 id="un-usuario-tiene-muchas-publicaciones">Un Usuario <strong><em>tiene</em></strong> muchas Publicaciones</h5>

<p>En el modelo <code>User</code> <strong>app/models/user.rb</strong> remplaza el contenido por:</p>

<pre><code class="language-ruby">class User &lt; ActiveRecord::Base

  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  has_many :posts
end
</code></pre>

<h2 id="18-autorizaci√≥n-qui√©n-puede-qui√©n-no-puede">18. Autorizaci√≥n: ¬øQui√©n puede? ¬øQui√©n no puede?</h2>

<p>Una vez que un usuario tiene acceso a la plataforma, hay que ver los permisos que este usuario tiene.</p>

<ul>
  <li>
    <p>Tenemos que asegurar que un usuario no puede cambiar la publicaci√≥n de otro usuario.</p>
  </li>
  <li>
    <p>Tambi√©n que las acciones (crear, cambiar o borrar una publicaci√≥n) se puede hacer solamente si estas autenticado.</p>
  </li>
</ul>

<h3 id="actualiza-el-controlador-posts">Actualiza el controlador Posts</h3>

<p>Ahora vamos a cambiar el codigo para que un usuario pueda crear, editar y borrar sus publicaciones y no aceder a todas.</p>

<p><strong>app/controllers/posts_controller.rb</strong></p>

<pre><code class="language-ruby">class PostsController &lt; ApplicationController
  before_action :set_post, only: [:show, :edit, :update, :destroy]

  def index
    @posts = Post.all
  end

  def show
  end

  def new
    @post = current_user.posts.build
  end

  def edit
  end

  def create
    @post = current_user.posts.build(post_params)
    if @post.save
      redirect_to @post, notice: '¬°Post creado satisfactoriamente!'
    else
      render :new
    end
  end

  def update
    if @post.update(post_params)
      redirect_to @post, notice: '¬°Post actualizado satisfactoriamente!'
    else
      render :edit
    end
  end

  def destroy
    @post.destroy
    redirect_to posts_url
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_post
      @post = Post.find_by(id: params[:id])
    end

    def correct_user
      @post = current_user.posts.find_by(id: params[:id])
      redirect_to posts_path, notice: "¬°No est√°s autorizada/o para editar este post!" if @post.nil?
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:description)
    end
end
</code></pre>

<h3 id="agreguemos-autenticaci√≥n-de-usuarios-con-devise">Agreguemos autenticaci√≥n de usuarios con Devise</h3>

<p>Devise crea algunos m√©todos de ayuda y filtros para que puedas manejar la autenticaci√≥n en tu aplicaci√≥n.
El filtro que ppodemos agregar sobre los controladores que quieres proteger es el siguiente:</p>

<p><code>before_action :authenticate_user!</code></p>

<p>En nuestra aplicaci√≥n vamos a proteger todas las acciones del controlador posts exceptuando <code>index</code> y <code>show</code> que son las que nos van a permitir listar y mostrar los detalles de una publicaci√≥n.</p>

<p>A√±ade <code>before_action</code> al Controlador Posts</p>

<p><strong>app/controllers/posts_controller.rb</strong></p>

<p>Debajo de <code>before_action :set_post ...</code></p>

<pre><code class="language-ruby">before_action :authenticate_user!, except: [:index, :show]
</code></pre>

<h3 id="a√±ade-el-correct_user">A√±ade el <code>:correct_user</code></h3>

<p>A√±ade el m√©todo <code>before_action</code> a tu controlador de Posts</p>

<p><strong>app/controllers/posts_controller.rb</strong></p>

<p>Debajo de <code>before_action :authenticate_user! ...</code></p>

<pre><code class="language-ruby">before_action :correct_user, only: [:edit, :update, :destroy]
</code></pre>

<h2 id="19-sube-im√°genes-con-active-storage">19. Sube im√°genes con Active Storage</h2>

<p>ActiveStorage permite a los desarrolladores gestionar la carga de archivos, el almacenamiento en la nube y la gesti√≥n de documentos vinculados a modelos en todas sus aplicaciones.
En nustro ejemplo, Active Storage nos permite manejar la carga de imagen de cada publicaci√≥n.</p>

<h3 id="primer-paso-instalar-active-storage">Primer paso instalar Active Storage</h3>

<p>Ejecuta el comando de instalaci√≥n:</p>

<p><code>consola</code></p>

<pre><code class="language-bash">rails active_storage:install
</code></pre>

<p>Y despues</p>

<pre><code class="language-bash">rails db:migrate
</code></pre>

<p>Con estos comandos acabamos de instalar Active Storage y actualizar la base de datos con campos necesarios para almacenar archivos en nustra aplicaci√≥n.</p>

<h3 id="instalar-image_processing">Instalar image_processing</h3>

<p>Ahora necesitamos instalar un libreria para procesar nuestras imagenes con las caracteriticas y el tama√±o de las imagenes que se suben a Instagram, entonces agregaremos la gema <code>image_processing</code>.</p>

<p>Dentro del archivo <strong>/gemfile</strong> busca la linea <code>gem 'image_processing', '~&gt; 1.2'</code> y quitale el <code>#</code> para que se vea de la siguiente forma:</p>

<pre><code class="language-ruby"># Use Active Storage variant
gem 'image_processing', '~&gt; 1.2'
</code></pre>

<p>Acabamos simplemente de remover un character que significa que esta linea es un comentario.
Ahora esta linea es parte del codigo y podemos ejecutar <code>bundle install</code> para instalar esta nueva gema.</p>

<p><code>consola</code></p>

<pre><code class="language-bash">CONTROL + C (para parar el servidor)
bundle install
</code></pre>

<p>Y despues</p>

<pre><code class="language-bash">rails server
</code></pre>

<p>Para iniciar el servidor otra vez.</p>

<h3 id="actualiza-post">Actualiza Post</h3>

<p>Actualiza el model <code>Post</code></p>

<p><strong>/app/models/post.rb</strong></p>

<pre><code class="language-ruby">class Post &lt; ApplicationRecord
  belongs_to :user
  has_one_attached :image

  def squared_img
    if image.attached?
      image.variant(combine_options: { resize: '600x600^', gravity: 'center', extent: '600x600' })
    end
  end
end
</code></pre>

<h3 id="edita-el-formulario-de-post">Edita el formulario de Post</h3>

<p><strong>/app/views/posts/_form.html.erb</strong></p>

<p>Justo despues de</p>

<pre><code class="language-rhtml">&lt;div class="form-group"&gt;
    &lt;%= f.label :description %&gt;
    &lt;%= f.text_field :description, class: "form-control" %&gt;
  &lt;/div&gt;
</code></pre>

<p>A√±ade:</p>

<pre><code class="language-rhtml">  &lt;div class="form-group"&gt;
    &lt;%= f.label :image %&gt;
    &lt;%= f.file_field :image %&gt;
  &lt;/div&gt;
</code></pre>

<h3 id="actualiza-el-controlador-de-posts-para-par√°metros-strong">Actualiza el controlador de Posts para par√°metros ‚Äústrong‚Äù</h3>

<p><strong>/app/controllers/posts_controller.rb</strong></p>

<p><code>def post_params</code></p>

<pre><code class="language-ruby">.
  def post_params
    params.require(:post).permit(:description, :image)
  end
.
</code></pre>

<p>Aqui estamos permitiendo que nuestro controlador pueda manejar un parametro adicional que se llama <code>image</code>.</p>

<h3 id="actualiza-la-vista-index-de-posts">Actualiza la vista <code>index</code> de Posts</h3>

<p><strong>/app/views/posts/index.html.erb</strong></p>

<pre><code class="language-rhtml">&lt;% if user_signed_in? %&gt;
  &lt;div class="main-wrapper"&gt;
    &lt;div class="row"&gt;
      &lt;% @posts.each do |post| %&gt;
        &lt;div class="col-xs-12 col-sm-6 col-md-4"&gt;
          &lt;div class="image center-block"&gt;
            &lt;%= link_to (image_tag post.squared_img, class:'img-fluid'), post_path(post) %&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;% end %&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;% else %&gt;
  &lt;div class="jumbotron text-center"&gt;
   &lt;h1&gt;¬°Bienvenidos a Instagram!&lt;/h1&gt;
     &lt;p&gt;
       &lt;%= link_to "Iniciar sesi√≥n", new_user_session_path, class: "btn btn-default btn-lg" %&gt;
       &lt;%= link_to "Reg√≠strate", new_user_registration_path, class: "btn btn-primary btn-lg" %&gt;
     &lt;/p&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<h3 id="actualiza-la-vista-show-de-posts">Actualiza la vista <code>show</code> de Posts</h3>

<p><strong>/app/views/posts/show.html.erb</strong></p>

<pre><code class="language-rhtml">&lt;div class="posts-wrapper row"&gt;
  &lt;div class="post"&gt;
    &lt;div class="image center-block"&gt;
      &lt;%= image_tag @post.squared_img, class:'img-responsive' %&gt;
    &lt;/div&gt;
    &lt;div class="post-head"&gt;
      &lt;div class="name"&gt;
        &lt;%= @post.user.email if @post.user %&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;p class="description"&gt;
      &lt;%= @post.description %&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h3 id="con-el-estilo-instagram">Con el estilo Instagram</h3>

<p>Abajo del archivo <strong>app/javascript/stylesheets/application.scss</strong> agregamos:</p>

<pre><code class="language-css">
.main-wrapper {
  margin-top: 100px
}

.posts-wrapper {
  padding-top: 40px;
  margin: 0 auto;
  max-width: 642px;
  width: 100%;
}

.post {
  background-color: #fff;
  border-color: #edeeee;
  border-style: solid;
  border-radius: 3px;
  border-width: 1px;
  margin-bottom: 60px;
}

.post-head {
  height: 64px;
  padding: 14px 20px;
  color: #125688;
  font-size: 15px;
  line-height: 18px;
  .thumbnail {}
  .name {
    display: block;
  }
}

.image {
  padding-bottom: 30px;
}

.description {
  padding: 24px 24px;
  font-size: 15px;
  line-height: 18px;
}
</code></pre>

<h2 id="20-editar-y-borrar-posts">20. Editar y borrar Posts</h2>

<h3 id="ahora-queremos-editar-nuestros-posts">Ahora queremos editar nuestros posts</h3>

<p><strong>app/views/posts/show.html.erb</strong></p>

<p>Dentro de <code>&lt;div class="post"&gt;</code> abajo colocamos:</p>

<pre><code class="language-rhtml">&lt;div class="text-center edit-links"&gt;
  &lt;%= link_to "‚Üê Volver", posts_path %&gt;
  |
  &lt;%= link_to "Editar Post", edit_post_path(@post) %&gt;
&lt;/div&gt;
</code></pre>

<p>y a√±ade los siguientes estilos</p>

<p><strong>app/javascript/stylesheets/application.scss</strong></p>

<pre><code class="language-css">.edit-links {
  margin-top: 20px;
  margin-bottom: 40px;
}
</code></pre>

<p>y en <strong>app/views/posts/edit.html.erb</strong>, lo m√°s arriba, a√±ade</p>

<pre><code class="language-rhtml">&lt;div class="text-center"&gt;
  &lt;%= image_tag @post.squared_img %&gt;
&lt;/div&gt;
</code></pre>

<h3 id="y-si-queremos-borrar-nuestro-post">¬øY si queremos borrar nuestro post?</h3>

<p><strong>app/views/posts/edit.html.erb</strong></p>

<p>Completamente abajo colocamos:</p>

<pre><code class="language-rhtml">&lt;div class="text-center edit-links"&gt;
  &lt;%= link_to "Borrar Post", post_path(@post), method: :delete, data: { confirm: "¬øEst√°s segura que quieres eliminar este post?" } %&gt;
  |
  &lt;%= link_to "cancelar", posts_path %&gt;
&lt;/div&gt;
</code></pre>

<h2 id="21-a√±ade-un-nombre-de-usuario-para-personalizar-la-aplicaci√≥n">21. A√±ade un nombre de usuario para personalizar la aplicaci√≥n</h2>

<h3 id="crea-la-migraci√≥n-en-la-base-de-datos">Crea la migraci√≥n en la base de datos</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">rails generate migration AddNameToUsers name:string
</code></pre>

<h3 id="migra-la-base-de-datos-1">Migra la base de datos</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">rails db:migrate
</code></pre>

<h3 id="vuelve-a-iniciar-el-servidor-despu√©s-de-correr-una-migraci√≥n">Vuelve a iniciar el servidor despu√©s de correr una migraci√≥n</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">CONTROL + C
rails server
</code></pre>

<h3 id="indica-a-devise-autorizar-este-nuevo-par√°metro">Indica a Devise autorizar este nuevo par√°metro</h3>

<p>Actualiza <strong>app/controllers/application_controller.rb</strong></p>

<pre><code class="language-ruby">class ApplicationController &lt; ActionController::Base
 protect_from_forgery with: :exception
 before_action :configure_permitted_parameters, if: :devise_controller?

protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:name])
    devise_parameter_sanitizer.permit(:account_update, keys: [:name])
  end
end
</code></pre>

<h3 id="y-tambi√©n-agregamos-el-campo-en-las-vistas">Y tambi√©n agregamos el campo en las vistas</h3>

<p><strong>app/views/devise/registrations/new.html.erb</strong>, <strong>app/views/devise/registrations/edit.html.erb</strong></p>

<p>Justo antes de</p>

<pre><code class="language-rhtml">&lt;div class="form-group"&gt;
  &lt;%= f.label :email %&gt;
</code></pre>

<p>A√±ade</p>

<pre><code class="language-rhtml">.
  &lt;div class="form-group"&gt;
    &lt;%= f.label :name %&gt;
    &lt;%= f.text_field :name, autofocus: true, class: "form-control" %&gt;
  &lt;/div&gt;
.
</code></pre>

<h3 id="terminamos-con-un-nuevo-controlador">Terminamos con un nuevo controlador</h3>

<p>Crea el archivo <strong>app/controllers/registrations_controller.rb</strong>:</p>

<pre><code class="language-ruby">class RegistrationsController &lt; Devise::RegistrationsController

  private

  def sign_up_params
    params.require(:user).permit(:email, :name, :password, :password_confirmation)
  end

  def account_update_params
    params.require(:user).permit(:email, :name, :password, :password_confirmation, :current_password)
  end
end  
</code></pre>

<h3 id="corrige-la-ruta">Corrige la ruta</h3>

<p><strong>/config/routes.rb</strong></p>

<p>Reemplaza</p>

<pre><code class="language-ruby">devise_for :users
</code></pre>

<p>con‚Ä¶</p>

<pre><code class="language-ruby">devise_for :users, :controllers =&gt; { registrations: 'registrations' }
</code></pre>

<h3 id="ahora-cambiamos-el-correo-por-el-nombre">Ahora cambiamos el correo por el nombre</h3>

<p><strong>app/views/posts/show.html.erb</strong></p>

<p>Reemplaza</p>

<pre><code class="language-rhtml">&lt;%= @post.user.email if @post.user %&gt;
``

con...

```rhtml
&lt;%= @post.user.name if @post.user %&gt;
</code></pre>

<h2 id="22-protege-tus-posts">22. Protege tus posts</h2>

<h3 id="rodea-el-enlace-de-edici√≥n-con-un-si-condicional">Rodea el enlace de edici√≥n con un ‚Äúsi‚Äù condicional</h3>

<p>De esta manera s√≥lo se pueden ver tus posts. Para poner esto de otra manera: Un usuario s√≥lo puede editar (o borrar) sus posts (y no los posts de otros usuarios ). ¬øTiene algun sentido?</p>

<p><strong>app/views/posts/show.html.erb</strong></p>

<p>Reemplaza</p>

<pre><code class="language-rhtml">&lt;div class="text-center edit-links"&gt;
  &lt;%= link_to "‚Üê Volver", posts_path %&gt;
    |
  &lt;%= link_to "Editar Post", edit_post_path(@post) %&gt;
&lt;/div&gt;
</code></pre>

<p>con</p>

<pre><code class="language-rhtml">&lt;% if @post.user == current_user %&gt;
  &lt;div class="text-center edit-links"&gt;
    &lt;%= link_to "‚Üê Volver", posts_path %&gt;
    |
    &lt;%= link_to "Edit post", edit_post_path(@post) %&gt;
  &lt;/div&gt;
&lt;% else %&gt;
  &lt;div class="text-center edit-links"&gt;
    &lt;%= link_to "‚Üê Volver", posts_path %&gt;
  &lt;/div&gt;
&lt;% end  %&gt;
</code></pre>

<h2 id="23-a√±adiremos-la-opci√≥n-de-comentar-posts">23. A√±adiremos la opci√≥n de comentar posts</h2>

<h3 id="empezamos-por-generar-un-modelo">Empezamos por generar un modelo</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">rails g model Comment user:references post:references content:text
</code></pre>

<p>Este comando nos genera una migraci√≥n <strong>db/migrate/</strong> para a√±adir los campos en la base de datos y un modelo <strong>app/model/comment.rb</strong>.</p>

<h3 id="migra-la-base-de-datos-2">Migra la base de datos</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">rails db:migrate
</code></pre>

<h3 id="vuelve-a-iniciar-el-servidor-despu√©s-de-correr-una-migraci√≥n-1">Vuelve a iniciar el servidor despu√©s de correr una migraci√≥n</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">CONTROL + C
rails server
</code></pre>

<h3 id="asocia-los-comentarios">Asocia los comentarios</h3>

<p>Ahora nuestro modelo <strong>app/model/comment.rb</strong> debe estar configurado para indicar a qui√©n pertenecen los comentarios.</p>

<pre><code class="language-ruby">class Comment &lt; ActiveRecord::Base  
  belongs_to :user
  belongs_to :post
end
</code></pre>

<p>Aqu√≠ estas lineas indican que un comentario pertenece a un <code>user</code> y tambi√©n pertenece a un <code>post</code>.</p>

<p>Por √∫ltimo, en <strong>app/models/user.rb</strong> and <strong>app/models/post.rb</strong> a√±ade la siguiente l√≠nea a cada uno:</p>

<pre><code class="language-ruby">has_many :comments, dependent: :destroy
</code></pre>

<h3 id="crea-la-ruta-para-los-comentarios">Crea la ruta para los comentarios</h3>

<p>En <strong>config/routes.rb</strong> Reemplaza</p>

<pre><code class="language-ruby">resources :posts
</code></pre>
<p>con‚Ä¶</p>

<pre><code class="language-ruby">resources :posts do  
  resources :comments
end
</code></pre>

<h3 id="para-terminar-con-la-l√≥gica-creamos-el-controlador">Para terminar con la l√≥gica, creamos el controlador</h3>

<p><code>consola</code></p>

<pre><code class="language-bash">rails g controller comments
</code></pre>

<p>El controlador de comentarios solo va a tener las acciones de crear y borrar comentarios.</p>

<p>Actalualiza <strong>app/controllers/comments_controller.rb</strong> con:</p>

<pre><code class="language-ruby">class CommentsController &lt; ApplicationController
  before_action :set_post

  def create  
    @comment = @post.comments.build(comment_params)
    @comment.user_id = current_user.id

    if @comment.save
      flash[:success] = "¬°Has comentado este post!"
      redirect_back fallback_location: root_path
    else
      flash[:alert] = "Revisa el formulario de comentarios, algo sali√≥ mal :/"
      render root_path
    end
  end

  def destroy  
    @comment = @post.comments.find(params[:id])

    @comment.destroy
    flash[:success] = "Comentario eliminado :("
    redirect_back fallback_location: root_path
  end

  private

  def comment_params  
    params.require(:comment).permit(:content)
  end

  def set_post  
    @post = Post.find(params[:post_id])
  end
end
</code></pre>

<h2 id="24-las-vistas-y-los-estilos-de-los-comentarios">24. Las vistas y los estilos de los comentarios</h2>

<p>Reemplaza <strong>app/views/posts/show.html.erb</strong></p>

<pre><code class="language-rhtml">&lt;div class="posts-wrapper"&gt;
  &lt;div class="post"&gt;
    &lt;div class="image center-block"&gt;
      &lt;%= image_tag @post.squared_img, class:'img-fluid' %&gt;
    &lt;/div&gt;
    &lt;div class="post-bottom"&gt;
      &lt;div class="description"&gt;
        &lt;div class="user-name"&gt;
          &lt;%= @post.user.name %&gt;
        &lt;/div&gt;
        &lt;%= @post.description %&gt;
      &lt;/div&gt;
      &lt;% if @post.comments %&gt;
        &lt;% @post.comments.each do |comment| %&gt;
          &lt;div class="comment"&gt;
            &lt;div class="user-name"&gt;
              &lt;%= comment.user.name %&gt;
            &lt;/div&gt;
            &lt;div class="comment-content"&gt;
              &lt;%= comment.content %&gt;
            &lt;/div&gt;
            &lt;% if comment.user == current_user %&gt;
              &lt;%= link_to post_comment_path(@post, comment), method: :delete, data: { confirm: "¬øEst√°s segura?" } do %&gt;
                &lt;span class="glyphicon glyphicon-remove delete-comment"&gt;&lt;/span&gt;
              &lt;% end %&gt;
            &lt;% end %&gt;
          &lt;/div&gt;
        &lt;% end %&gt;
      &lt;% end %&gt;
    &lt;/div&gt;
    &lt;div class="comment-like-form row"&gt;
      &lt;div class="like-button col-sm-1"&gt;
        &lt;span class="glyphicon glyphicon-heart-empty"&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class="comment-form col-sm-11"&gt;
        &lt;%= form_for [@post, @post.comments.new] do |f| %&gt;
          &lt;div class="form-group"&gt;
            &lt;%= f.text_field :content, class: 'form-control', placeholder: 'A√±ade un comentario...' %&gt;
          &lt;/div&gt;
        &lt;% end %&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;% if @post.user.id == current_user.id %&gt;
  &lt;div class="text-center edit-links"&gt;
    &lt;%= link_to "Cancelar", posts_path %&gt;
    |
    &lt;%= link_to "Editar el post", edit_post_path(@post) %&gt;
  &lt;/div&gt;
&lt;% else %&gt;
  &lt;div class="text-center edit-links"&gt;
    &lt;%= link_to "‚Üê Volver", posts_path %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<h3 id="los-estilos-para-ponerlo-bonito">Los estilos para ponerlo bonito</h3>

<p>En <strong>app/javascript/stylesheets/application.scss</strong></p>

<p>Borra los estilos debajo de</p>

<pre><code class="language-css">.navbar-brand {
  font-weight: bold;
}
</code></pre>

<p>Y reemplaza con</p>

<pre><code class="language-css">
.main-wrapper {
  margin-top: 100px
}

.image {
  padding-bottom: 30px;
}

.posts-wrapper {
  padding-top: 40px;
  margin: 0 auto;
  max-width: 642px;
  width: 100%;
}

.post {
  background-color: #fff;
  border-color: #edeeee;
  border-style: solid;
  border-radius: 3px;
  border-width: 1px;
  margin-bottom: 60px;
  .post-head {
    flex-direction: row;
    height: 64px;
    padding-left: 24px;
    padding-right: 24px;
    padding-top: 24px;
    color: #125688;
    font-size: 15px;
    line-height: 18px;
    .user-name, .time-ago {
      display: inline;
    }
    .user-name {
      font-weight: 500;
    }
    .time-ago {
      color: #A5A7AA;
      float: right;
    }
  }
}

.post-bottom {
  .user-name, .comment-content {
    display: inline;
  }
  .description {
    margin-bottom: 7px;
  }
  .user-name {
    font-weight: 500;
    margin-right: 0.3em;
    color: #125688;
    font-size: 15px;
  }
  .user-name, .caption-content {
    display: inline;
  }
  .comment {
    margin-top: 7px;
    .user-name {
      font-weight: 500;
      margin-right: 0.3em;
    }
    .delete-comment {
      float: right;
      color: #515151;
    }
  }
  margin-bottom: 7px;
  padding-top: 24px;
  padding-left: 24px;
  padding-right: 24px;
  padding-bottom: 10px;
  font-size: 15px;
  line-height: 18px;
}

.comment_content {
  font-size: 15px;
  line-height: 18px;
  border: medium none;
  width: 100%;
  color: #4B4F54;
}

.comment-like-form {
  padding-top: 24px;
  margin-top: 13px;
  margin-left: 24px;
  margin-right: 24px;
  min-height: 68px;
  align-items: center;
  border-top: 1px solid #EEEFEF;
  flex-direction: row;
  justify-content: center;
}

.form-wrapper {
  width: 60%;
  margin: 20px auto;
  background-color: #fff;
  padding: 40px;
  border: 1px solid #eeefef;
  border-radius: 3px;
}

.edit-links {
  margin-top: 20px;
  margin-bottom: 40px;
}
</code></pre>

<h2 id="25-control-de-versiones-y-github">25. Control de versiones y Github</h2>

<p><strong>Recursos:</strong>
<a href="http://wikis.fdi.ucm.es/ELP/Control_de_versiones_con_Git_y_GitHub">Control de versiones con Git y GitHub</a></p>

<p>¬°Ahora veremos en secuencia los pasos necesarios para subir tu primer proyecto a la plataforma Github!</p>

<ol>
  <li>En la parte superior derecha de tu espacio de trabajo en <a href="http://c9.io">C9</a>, haz clic en tu foto para abrir el panel de configuraci√≥n y clic en <code>Dashboard</code>.
<a href="https://c9.io/account/ssh">https://c9.io/account/ssh</a></li>
  <li>Ahora click en el c√≠rculo de arriba que tiene un engranaje y despu√©s en el men√∫ lateral que dice <code>SSH keys</code></li>
  <li>Copia todas las l√≠neas que empiezan por <code>ssh-rsa...</code></li>
  <li>Crea una cuenta en GitHub: <a href="https://github.com">https://github.com</a></li>
  <li>Entra en <a href="https://github.com/settings/profile">tu perfil de usuario</a> y haz clic en <code>SSH and GPG keys</code>.
<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a></li>
  <li>Ahora clic en ‚ÄúAdd SSH Key‚Äù. Introduce el t√≠tulo: ‚ÄúC9‚Äù, pega la clave SSH en el cuadro ‚Äúkey‚Äù, y haz clic en ‚ÄúAdd key‚Äù.</li>
  <li>Crea un repositorio nuevo vac√≠o para tu nuevo proyecto. Desde tu repositorio, copia el enlace SSH:
    <pre><code>git@github.com:sunombre/nombredelproyecto.git
</code></pre>
  </li>
  <li>Convierte tu directorio actual en un repositorio git ejecutando en la consola de C9:
    <pre><code>git init
</code></pre>
  </li>
  <li>Utilizando el enlace SSH que copiaste en el paso 7, a√±ade el repositorio remoto como origen:
    <pre><code>git remote add origin git@github.com:sunombre/nombredelproyecto.git
</code></pre>
  </li>
  <li>A√±ade tus archivos y haz commit
    <pre><code>git add .
</code></pre>
    <pre><code>git commit -m "Mi Primer commit"
</code></pre>
  </li>
  <li>Sube los archivos:
    <pre><code>git push -u origin master
</code></pre>
  </li>
</ol>

<p><strong>Ahora tienes tu repositorio actualizado en GitHub</strong></p>

<h2 id="26-tener-nuestra-aplicaci√≥n-en-la-web">26. Tener nuestra aplicaci√≥n en la web</h2>

<p>¬øC√≥mo subir nuestra aplicaci√≥n en la web, de forma que otros puedan verla? Con un servicio llamado <a href="http://heroku.com">Heroku</a> que permite subir tu aplicaci√≥n en un servidor gratis en cuesti√≥n de segundos.</p>

<h3 id="reg√≠strate-en-heroku">Reg√≠strate en Heroku</h3>

<p><a href="https://www.heroku.com/">https://www.heroku.com/</a></p>

<h3 id="c9-ya-tiene-una-herramienta-que-se-llama-heroku-toolbelt-solo-necesitamos-actualizarla">C9 ya tiene una herramienta que se llama Heroku toolbelt. Solo necesitamos actualizarla</h3>

<pre><code class="language-bash">wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</code></pre>

<h3 id="inicia-sesi√≥n-en-heroku-desde-la-consola">Inicia sesi√≥n en Heroku desde la consola</h3>

<pre><code class="language-bash">heroku login
Email: (Introduce tu correo electr√≥nico)
Password ( Introduce tu contrase√±a - se mostrar√° en blanco y es normal )
</code></pre>

<h3 id="a√±ade-las-claves-a-heroku">A√±ade las claves a Heroku</h3>

<pre><code class="language-bash">heroku keys:add
heroku create #crea una nueva URL para la aplicaci√≥n
</code></pre>

<h3 id="a√±ade-las-nuevas-gemas-y-grupos-de-gemas-para-heroku">A√±ade las nuevas gemas y grupos de gemas para Heroku</h3>

<p><strong>/gemfile</strong></p>

<pre><code class="language-ruby">group :development, :test do
     gem 'sqlite3'
end

group :production do
     gem 'pg'
     gem 'rails_12factor'
end
</code></pre>

<p>Nota: Despu√©s de crear un grupo <code>producci√≥n</code> a tu Gemfile, debes cambiar a utilizar <code>bundle install --without production</code></p>

<h3 id="entonces-instalamos-las-gemas">Entonces instalamos las gemas</h3>

<pre><code class="language-bash">bundle install --without production
</code></pre>

<h3 id="el-baile-de-git">El baile de git</h3>

<pre><code class="language-bash">git add --all
git commit -m "¬°Lista para subir a Heroku!"
git push origin master
</code></pre>

<h3 id="sube-a-heroku">Sube a Heroku</h3>

<pre><code class="language-bash">git push heroku master
heroku open
heroku rename instagram #Reemplaza "instagram" con el nombre de tu proyecto
heroku run rails db:migrate #Para correr las migraciones
</code></pre>

<h2 id="bonus-comentarios-con-ajax">Bonus: Comentarios con AJAX</h2>

<p>¬øC√≥mo intercambiar informaci√≥n con el servidor sin tener que refrescar la p√°gina? Ese es el problema que soluciona <a href="https://es.wikipedia.org/wiki/AJAX">Ajax</a>.
En nuestro caso ser√≠a como a√±adir comentarios sin tener que refrescar la p√°gina.</p>

<ul>
  <li>recursos: <a href="http://blog.makeitreal.camp/javascript-jquery-y-ajax">JavaScript, jQuery y Ajax</a></li>
</ul>

<h2 id="27--mueve-los-comentarios-en-un-parcial">27.  Mueve los comentarios en un parcial</h2>

<p>Ajax en Rails se maneja con parciales, entonces crea un nuevo archivo</p>

<p><strong>app/views/comments/_comment.html.erb</strong></p>

<pre><code class="language-rhtml">&lt;div class="comment" id="comment_&lt;%= comment.id %&gt;"&gt;
  &lt;div class="user-name"&gt;
    &lt;%= comment.user.name %&gt;
  &lt;/div&gt;
  &lt;div class="comment-content"&gt;
    &lt;%= comment.content %&gt;
  &lt;/div&gt;
  &lt;% if comment.user == current_user %&gt;
    &lt;%= link_to post_comment_path(post, comment), method: :delete, data: { confirm: "¬øEst√°s segura?" } do %&gt;
      &lt;span class="glyphicon glyphicon-remove delete-comment"&gt;&lt;/span&gt;
    &lt;% end %&gt;
  &lt;% end %&gt;
&lt;/div&gt;
</code></pre>

<h3 id="ahora-podemos-cambiar-showhtmlerb">Ahora podemos cambiar <code>show.html.erb</code></h3>

<p>Acabamos de mudar el comentario aparte en un archivo separado. Ahora, vamos a tener que ajustar nuestro <code>show</code> para seguir monstrando los comentarios de manera apropiada.</p>

<p>En <strong>app/views/posts/show.html.erb</strong></p>

<p>Reemplaza</p>

<pre><code class="language-rhtml">&lt;% @post.comments.each do |comment| %&gt;
  &lt;div class="comment"&gt;
    &lt;div class="user-name"&gt;
      &lt;%= comment.user.name %&gt;
    &lt;/div&gt;
    &lt;div class="comment-content"&gt;
      &lt;%= comment.content %&gt;
    &lt;/div&gt;
    &lt;% if comment.user == current_user %&gt;
      &lt;%= link_to post_comment_path(@post, comment), method: :delete, data: { confirm: "¬øEst√°s segura?" } do %&gt;
        &lt;span class="glyphicon glyphicon-remove delete-comment"&gt;&lt;/span&gt;
      &lt;% end %&gt;
    &lt;% end %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<p>con‚Ä¶</p>

<pre><code class="language-rhtml">&lt;%= render @post.comments, post: @post %&gt;
</code></pre>

<p>Y sigue funcionando igual.</p>

<h3 id="a√±adiendo-remote-true-a-nuestro-formulario">A√±adiendo <code>remote: true</code> a nuestro formulario</h3>

<p>En <strong>app/views/posts/show.html.erb</strong></p>

<p>reemplaza</p>

<pre><code class="language-rhtml">&lt;% if post.comments %&gt;
  &lt;%= render @post.comments, post: @post %&gt;
&lt;% end %&gt;
</code></pre>

<p>con‚Ä¶</p>

<pre><code class="language-rhtml">&lt;div class="comments" id="comments_&lt;%= @post.id %&gt;"&gt;
  &lt;% if @post.comments %&gt;
    &lt;%= render @post.comments, post: @post %&gt;
  &lt;% end %&gt;
&lt;/div&gt;
</code></pre>

<p>y las l√≠neas</p>

<pre><code class="language-rhtml">&lt;%= form_for [@post, @post.comments.new] do |f| %&gt;
  &lt;%= f.text_field :content, placeholder: 'A√±ade un comentario...' %&gt;
&lt;% end %&gt;
</code></pre>

<p>con‚Ä¶</p>

<pre><code class="language-rhtml">&lt;%= form_for([@post, @post.comments.build], remote: true) do |f| %&gt;
  &lt;%= f.text_field :content, placeholder: 'A√±ade un comentario...', id: "comment_content_#{@post.id}" %&gt;
&lt;% end %&gt;
</code></pre>

<h3 id="tenemos-que-ajustar-tambi√©n-el-controlador">Tenemos que ajustar tambi√©n el controlador</h3>

<p><strong>app/controllers/comments_controller.rb</strong></p>

<p>Reemplaza el <code>action</code> para crear con:</p>

<pre><code class="language-ruby">def create
  @comment = @post.comments.build(comment_params)
  @comment.user_id = current_user.id

  if @comment.save
    respond_to do |format|
      format.html { redirect_to root_path }
      format.js
    end
  else
    flash[:alert] = "Revisa el formulario de comentarios, algo sali√≥ mal :/"
    render root_path
  end
end
</code></pre>

<h3 id="creamos-la-respuesta-javascript">Creamos la respuesta Javascript</h3>

<p>¬°jQuery al rescate!
Crea un nuevo archivo en la carpeta <strong>app/views/comments/</strong> un archivo <strong>create.js.erb</strong>. En ese archivo, agrega la siguiente combinaci√≥n de Javascript / Ruby</p>

<pre><code class="language-erb">$('#comments_&lt;%= @post.id %&gt;').append("&lt;%=j render 'comments/comment', post: @post, comment: @comment %&gt;");
$('#comment_content_&lt;%= @post.id %&gt;').val('')
</code></pre>

<h3 id="ahora-tambi√©n-para-borrar-comentarios">Ahora tambi√©n para borrar comentarios</h3>

<p>A√±adir <code>remote: true</code> al enlace para borrar</p>

<p><strong>app/views/comments/_comment.html</strong></p>

<p>Al final de esta l√≠nea y antes de <code>do</code>, a√±ade <code>, remote: true</code></p>

<pre><code class="language-rhtml">&lt;%= link_to post_comment_path(post, comment), method: :delete, data: { confirm: "¬øEst√°s segura?" } do %&gt;
</code></pre>

<p>Quedar√≠a:</p>

<pre><code class="language-rhtml">&lt;%= link_to post_comment_path(post, comment), method: :delete, data: { confirm: "¬øEst√°s segura?" }, remote: true do %&gt;
</code></pre>

<h3 id="a√±ade-la-respuesta-javascript-para-la-acci√≥n-del-controlador">A√±ade la respuesta Javascript para la acci√≥n del controlador</h3>

<p>Al igual que antes, ahora podemos asegurar que rails responde no s√≥lo con HTML, sino tambi√©n con Javascript.</p>

<p>A√±ade el m√©todo <code>responds_to</code> a la acci√≥n <code>destroy</code> dentro del <code>comments_controller</code></p>

<pre><code class="language-ruby">def destroy
  @comment = @post.comments.find(params[:id])

  if @comment.user_id == current_user.id
   @comment.delete
   respond_to do |format|
     format.html { redirect_to root_path }
     format.js
   end
  end
end
</code></pre>

<p>Y por √∫ltimo pero no menos importante..</p>

<h3 id="finalizar-con-jquery">Finalizar con jQuery</h3>

<p>¬°Simplemente estamos a√±adiendo nuestra lista de comentarios actualizada!</p>

<p>Crea el nuevo archivo <strong>destroy.js.erb</strong> dentro de la carpeta <strong>app/views/comments/</strong> ( en la misma ubicaci√≥n que el archivo create.js.erb ).</p>

<pre><code class="language-erb">$('#comments_&lt;%= @post.id %&gt;').html("&lt;%= j render @post.comments, post: @post, comment: @comment %&gt;");
</code></pre>

<h2 id="resources">Resources</h2>

<p>Aqu√≠ est√°n algunos recursos utiles para poder seguir aprediendo.
Algunos sirvieron tambi√©n en la elaboraci√≥n de esta gu√≠a.</p>

<p><em>Introducci√≥n a Rails - codigofacilito</em> <a href="https://codigofacilito.com/articulos/mvc-model-view-controller-explicado">http://rubysur.org/introduccion.a.rails/</a></p>

<p><em>MVC (Model, View, Controller) Explicado - codigofacilito:</em> <a href="https://codigofacilito.co/articulos/mvc-model-view-controller-explicado">https://codigofacilito.com/articulos/mvc-model-view-controller-explicado</a></p>

<p><em>Asociaciones - Make it Real:</em> <a href="https://codigofacilito.com/articulos/mvc-model-view-controlle-explicado">https://makeitrealcamp.gitbook.io/ruby-on-rails-5/asociaciones</a></p>

<p><em>Make it Real - Ruby on Rails:</em> <a href="https://guias.makeitreal.camp/ruby-on-rails-i">https://guias.makeitreal.camp/ruby-on-rails-i</a></p>

<p><em>Ruby on Rails: El desarrollo web que no molesta:</em> <a href="http://rubyonrails.org.es/">http://rubyonrails.org.es/</a></p>

<p><em>Introducci√≥n a Ruby on Rails:</em> <a href="https://uniwebsidad.com/libros/introduccion-rails">https://uniwebsidad.com/libros/introduccion-rails</a></p>

<p><em>Tutorial de Ruby on Rails (3a. edici√≥n.) - Michael Hartl</em> <a href="https://spanish.railstutorial.org/book">https://spanish.railstutorial.org/book</a></p>

<h2 id="debug">Debug</h2>

<p>Error para correr <code>rails console</code></p>

<p><code>Library not loaded: /usr/local/opt/readline/lib/libreadline.7.dylib (LoadError)</code></p>

<p>https://gist.github.com/zulhfreelancer/47efc39584cb9f006da43c41c014e03a</p>
:ET