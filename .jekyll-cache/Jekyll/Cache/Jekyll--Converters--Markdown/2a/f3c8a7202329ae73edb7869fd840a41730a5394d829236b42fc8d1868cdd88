I"«k<h3 id="repostitorio-de-la-aplicaci√≥n">Repostitorio de la aplicaci√≥n</h3>
<p><a href="https://github.com/railsgirls-cali/example-store-2017">https://github.com/railsgirls-cali/example-store-2017</a></p>

<h3 id="demo">Demo</h3>
<p><a href="https://railsgirls-cali-store-2017.herokuapp.com/">https://railsgirls-cali-store-2017.herokuapp.com/</a></p>

<h3 id="gu√≠a-detalla">Gu√≠a detalla</h3>

<p>Puedes ver la gu√≠a m√°s detallada en Google Docs <a href="https://docs.google.com/document/d/1Uvk-ile_XPTGowkneNc49l2SPNSzUe7KSFKlMUrGp28/edit?usp=sharing">aqu√≠</a>.</p>

<h2 id="1-creando-una-aplicaci√≥n-nueva">1. Creando una aplicaci√≥n nueva</h2>

<p>En la terminal:</p>

<pre><code>rails new tienda
</code></pre>
<pre><code>cd tienda
</code></pre>
<pre><code>bundle install
</code></pre>

<h3 id="arranca-el-servidor-de-rails">Arranca el servidor de Rails</h3>

<p>En la terminal:</p>

<pre><code>rails server
</code></pre>

<h2 id="2-p√°gina-de-inicio">2. P√°gina de inicio</h2>

<p>En el navegador, ve a la URL: <a href="localhost:3000">localhost:3000</a> . Esta es la p√°gina de inicio por defecto para las aplicaciones Rails.</p>

<h2 id="3-creando-el-esqueleto-para-producto-generador-scaffold">3. Creando el ‚Äúesqueleto‚Äù para producto (generador scaffold)</h2>

<p>Como necesitamos una tienda, pues quisi√©ramos tener algo para vender en ella, lo cual vamos a llamar ‚Äúproductos‚Äù o ‚Äúproducts‚Äù en ingl√©s.</p>

<p>Usaremos  la funcionalidad <strong>scaffold</strong> de Rails para generar un c√≥digo base que nos permita listar, a√±adir, eliminar, editar y ver objetos, en nuestro caso productos.</p>

<p>En la terminal:</p>

<pre><code>rails generate scaffold product name:string description:text picture:string price:float quantity:integer
</code></pre>

<p>Al correr el generador, vemos que rails de nuevo ha generado otro mont√≥n de archivos, todos ellos relacionados con lo que le llamamos productos (products).</p>

<p>El c√≥digo que hemos generado ha debido de crear una p√°gina b√°sica dedicada a gestionar productos (products).</p>

<h3 id="migraciones">Migraciones</h3>

<p>Si vamos a <a href="localhost:3000/products">localhost:3000/products</a> vamos a tener nuestro primer error :(</p>

<p>Para solucionarlo, en la terminal:</p>
<pre><code>rake db:migrate
</code></pre>

<p>Este comando nos permite crear la tabla de productos en la base de datos d√≥nde vamos a almacenar toda la informaci√≥n de la tienda.</p>

<h3 id="validaciones">Validaciones</h3>
<p>Para asegurarnos que todos nuestros productos tengan un foto vamos a agregar una validaci√≥n al ‚ÄúProduct‚Äù:</p>

<pre><code class="language-ruby">class Product &lt; ApplicationRecord
  validates_presence_of :picture
end
</code></pre>

<h3 id="4-afinando-las-routes">4. Afinando las routes</h3>

<p>C√≥mo mencionamos en el paso 2, Rails crea una p√°gina de inicio por defecto. Cambiemos nuestra p√°gina de inicio para que sea el listado de productos de nuestra tienda:</p>

<pre><code class="language-ruby">root :to =&gt; 'products#index'
</code></pre>

<h3 id="5-mostrando-la-foto-de-nuestro-producto">5. Mostrando la foto de nuestro producto</h3>
<p>Por defecto en vez de la foto se est√° mostrando la URL. Modifiquemos la lista de productos y el detalle:</p>

<p>Lista de prodcutos: <code>app/views/products/index.html.erb</code></p>

<pre><code class="language-rhtml">&lt;p id="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;

&lt;h1&gt;Listado de Productos&lt;/h1&gt;

&lt;ul&gt;
  &lt;% @products.each do |product| %&gt;
    &lt;li&gt;
      &lt;h3&gt;&lt;%= product.name %&gt;&lt;/h3&gt;
      &lt;%= link_to image_tag(product.picture, width: '200'), product %&gt;
      &lt;%= number_to_currency product.price, precision: 0 %&gt;
      &lt;%= link_to 'Detalle', product %&gt;&lt;/li&gt;
  &lt;% end %&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;%= link_to 'New Product', new_product_path %&gt;
&lt;/p&gt;
</code></pre>

<p>Detalle del producto: <code>app/views/products/show.html.erb</code></p>

<pre><code class="language-rhtml">&lt;p id="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;

&lt;h1&gt;&lt;%= @product.name %&gt;&lt;/h1&gt;
&lt;%= link_to image_tag(@product.picture, width: 300), @product %&gt;
&lt;p&gt;
  &lt;%= @product.description %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Precio:&lt;/strong&gt;
  &lt;%= number_to_currency @product.price, precision: 0 %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Cantidades disponibles:&lt;/strong&gt;
  &lt;%= @product.quantity %&gt;
&lt;/p&gt;

&lt;%= link_to 'Regresar a productos', products_path %&gt;
&lt;%= link_to 'Eliminar producto', product_path(@product), method: :delete %&gt;
</code></pre>

<h2 id="6-comprando-un-producto">6. Comprando un producto</h2>

<p>Para comprar un producto vamos a tener que ‚Äútocar‚Äù todo el MVC y las rutas.</p>

<p>Agregamos al archivo <code>config/routes.rb</code> una nueva ruta:</p>

<pre><code class="language-ruby">get 'products/:id/purchase', to: 'products#purchase', as: :purchase_product
</code></pre>

<p>Lo siguiente es modificar el controlador <code>app/controllers/products_controller.rb</code> agregando la acci√≥n comprar (purchase):</p>

<pre><code class="language-ruby">def purchase
  @product = Product.find(params[:id])
  @product.decrement_quantity
  @product.save!

  respond_to do |format|
    format.html { redirect_to @product, notice: 'Producto comprado' }
  end
end
</code></pre>

<p>A√±adimos al modelo <code>app/models/product.rb</code> un nuevo m√©todo:</p>

<pre><code class="language-ruby">def decrement_quantity
  self.quantity -= 1
end
</code></pre>

<p>Por √∫ltimo en <code>app/views/products/show.html.erb</code>, agregamos un bot√≥n despu√©s del precio:</p>

<pre><code class="language-rhtml">&lt;h3&gt;
  &lt;% if @product.quantity &gt; 0 %&gt;
    &lt;%= link_to 'Comprar', purchase_product_path(@product), style: "color:blue" %&gt;
  &lt;% else %&gt;
    &lt;%= link_to 'Lo lamentamos, se han acabado las unidades disponibles', products_path, style: "color:blue" %&gt;
  &lt;% end %&gt;
&lt;/h3&gt;
</code></pre>

<p>Prueba haciendo click en un producto para ver el detalle y presionando el bot√≥n comprar para ver como se decrementan las unidades disponibles.</p>

<h2 id="7-embellecimiento">7. Embellecimiento</h2>
<p>La aplicaci√≥n no luce muy bien todav√≠a. Vamos a hacer algo con esto. Usaremos el proyecto Bootstrap para darle estilo en forma f√°cil.</p>

<h3 id="estilos">Estilos</h3>

<p>Agregamos una nueva <strong>gema</strong> (libreria) <code>config/Gemfile</code>:</p>

<pre><code class="language-ruby">gem 'bootstrap-sass', '~&gt; 3.3.6'
</code></pre>

<p>Cambiamos la <strong>extensi√≥n</strong> del archivo <code>app/assets/stylesheets/application.css</code> por <code>scss</code> y reemplazmos su contenido por:</p>

<pre><code class="language-scss">@import "bootstrap-sprockets";
@import "bootstrap";

@import "products";
@import "scaffolds";
</code></pre>

<p><strong>Nota:</strong> Debemos reiniciar el servidor despu√©s de hacer este cambio.</p>

<p>Ahora agregamos los estilos.</p>

<p>Agregamos al archivo <code>app/assets/stylesheets/application.scss</code>:</p>

<pre><code class="language-scss">.navbar-default {
  background-color: #d3360b;
  a {
    color: white !important;
  }
  .navbar-brand {
    font-size: 24px;
  }
}
</code></pre>

<p>Sustituimos completamente el archivo <code>app/assets/stylesheets/products.scss</code>:</p>

<pre><code class="language-scss">.product-cont {
  text-align: center;
  h3 a {
    color: #d3360b;
    margin-bottom: 12px;
  }
  a:hover {
    background: none;
  }
  p {
    margin-top: 10px;
    font-size: 16px;
  }
}

.product-details {
  h1 {
    color: #d3360b;
    margin-bottom: 24px;
  }
  p {
    font-size: 18px;
  }
  .description {
    margin-top: 100px;
  }
}
</code></pre>

<p>Sustituimos completamente el archivo <code>app/assets/stylesheets/scaffolds.scss</code>:</p>

<pre><code class="language-scss">body {
  background-color: #fff;
  color: #333;
  font-family: verdana, arial, helvetica, sans-serif;
  font-size: 13px;
  line-height: 18px;
}

p, ol, ul, td {
  font-family: verdana, arial, helvetica, sans-serif;
  font-size: 13px;
  line-height: 18px;
}

pre {
  background-color: #eee;
  padding: 10px;
  font-size: 11px;
}

a {
  color: #000;

  &amp;:visited {
    color: #666;
  }

  &amp;:hover {
    color: #fff;
    background-color: #000;
  }
}

div {
  &amp;.field, &amp;.actions {
    margin-bottom: 10px;
  }
}

#notice {
  color: green;
}

.field_with_errors {
  padding: 2px;
  background-color: red;
  display: table;
}

#error_explanation {
  width: 450px;
  border: 2px solid red;
  padding: 7px;
  padding-bottom: 0;
  margin-bottom: 20px;
  background-color: #f0f0f0;

  h2 {
    text-align: left;
    font-weight: bold;
    padding: 5px 5px 5px 15px;
    font-size: 12px;
    margin: -7px;
    margin-bottom: 0px;
    background-color: #c00;
    color: #fff;
  }

  ul li {
    font-size: 12px;
    list-style: square;
  }
}
</code></pre>
<h3 id="vistas">Vistas</h3>

<p>Tambi√©n tenemos que actualizar las vistas para aplicar estos estilos.</p>

<p>Primero actualizamos el ‚Äúencuadre‚Äù de la aplicaci√≥n. Sustituimos completamente el archivo <code>app/views/layouts/application.html.erb</code>:</p>

<pre><code class="language-rhtml">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Tienda Rails Girls Cali 2017&lt;/title&gt;
  &lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;%= render 'layouts/header' %&gt;
  &lt;% if notice.present? %&gt;
    &lt;div id="notice" class="alert alert-success alert-dismissible"&gt;
      &lt;%= notice %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
  &lt;div class="container-fluid"&gt;
    &lt;%= yield %&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Como se pueden dar cuenta en el <strong>layout</strong> de la aplicaci√≥n, estamos <strong>renderizando</strong> un archivo <code>header</code> (la cabecera). El contendio de este archivo ser√° incluido en el layout.</p>

<p>Entonces creamos un nuevo archivo <code>app/views/layouts/_header.html.erb</code>, con el siguiente contenido:</p>

<pre><code class="language-rhtml">&lt;nav class="navbar navbar-default"&gt;
  &lt;div class="container-fluid"&gt;
    &lt;!-- Brand and toggle get grouped for better mobile display --&gt;
    &lt;div class="navbar-header"&gt;
      &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt;
        &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;%= link_to 'Tienda Rails Girls Cali', root_path, class: "navbar-brand" %&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/nav&gt;
</code></pre>

<p>Adem√°s del layout debemos actualizar las dem√°s vistas de productos. 
Para esto vamos a reemplazar todo el c√≥digo de <code>app/views/products/index.html.erb</code>, <code>show.html.erb</code>, <code>new.html.erb</code>, <code>edit.html.erb</code> y <code>form.html.erb</code>.</p>

<p>Vamos al <a href="https://github.com/railsgirls-cali/example-store-2017">repositorio</a> para copiar el c√≥digo de estas vistas.</p>

<h2 id="8-buscando-productos">8. Buscando Productos</h2>

<p>Para hacer la aplicaci√≥n m√°s interesante y √∫til, ser√≠a ideal poder buscar por los productos de manera f√°cil y r√°pida desde cualquier p√°gina.</p>

<p>Para ello, vamos a colocarle un campo de b√∫squeda en la cabecera (header) que acabamos de poner.</p>

<pre><code class="language-rhtml">&lt;%= form_tag search_products_path, class: 'navbar-form navbar-left pull-right',
             role: 'search', method: :get do %&gt;
  &lt;div class="form-group"&gt;
    &lt;%= text_field_tag :product_name, @product_name, class: 'form-control',
                       placeholder: 'Buscar productos' %&gt;
  &lt;/div&gt;
  &lt;%= submit_tag 'Buscar', class: 'btn btn-default' %&gt;
&lt;% end %&gt;
</code></pre>
<p>Ahora agregamos una nueva ruta para las b√∫squedas, en el archivo <code>config/routes.rb</code> modificamos:</p>

<pre><code class="language-ruby">resources :products
</code></pre>

<p>por</p>

<pre><code class="language-ruby">resources :products do
  get 'search', on: :collection
end
</code></pre>

<p>Esto har√° que nuestra aplicaci√≥n responda a la url <code>/products/search</code> (que es lo mismo que el search_products_path que se ve en el c√≥digo agregado) que es a donde nuestro formulario enviar√° los datos ingresados en el campo de texto de b√∫squeda.</p>

<p>Agregamos la nueva acci√≥n  <strong>‚Äúbuscar‚Äù</strong> al controlador <code>app/controllers/products_controller.rb</code>:</p>

<pre><code class="language-ruby">def search
  @product_name = params[:product_name]
  @products = Product.search(@product_name)
end
</code></pre>

<p>Tambi√©n debemos ir a nuestro modelo de Producto (que se comunica con la base de datos) <code>app/models/product.rb</code>  y agregar la l√≥gica de b√∫squeda como tal:</p>

<pre><code class="language-ruby">def self.search(term)
  self.where("lower(name) LIKE lower(?)", "%#{term}%")
end
</code></pre>

<p>Lo que hemos escrito significa que va a buscar los productos por nombre, sin importar may√∫sculas o min√∫sculas.</p>

<p>Por √∫ltimo creamos la vista <code>app/views/products/search.html.erb</code> y colocamos lo siguiente:</p>

<pre><code class="language-rhtml">&lt;h1&gt;&lt;%= "Resultados de productos: #{@product_name}" %&gt;&lt;/h1&gt;
&lt;br&gt;
&lt;br&gt;
&lt;ul&gt;
  &lt;% @products.each do |product| %&gt;
    &lt;li&gt;
      &lt;h3&gt;&lt;%= product.name %&gt;&lt;/h3&gt;
      &lt;%= link_to image_tag(product.picture, width: '200'), product %&gt;
      &lt;%= number_to_currency product.price, precision: 0 %&gt;
      &lt;%= link_to 'Detalle', product %&gt;&lt;/li&gt;
  &lt;% end %&gt;
&lt;/ul&gt;

&lt;%= link_to 'Regresar a productos', products_path %&gt;
</code></pre>

<p>Refresca la p√°gina y escribe una palabra o parte de ella en la caja de b√∫squeda para ver los resultados de productos.</p>

<h2 id="9-qui√©n-administra-mi-tienda">9. ¬øQui√©n administra mi tienda?</h2>

<p>En esta parte vamos a realizar las funcionalidades de crear, editar y eliminar productos. Esto lo vamos a hacer en una ruta diferente a la que acceden los usuarios normales, que es la ruta del administrador.</p>

<p>Primero vamos a crear las siguientes carpetas <code>app/controllers/admin</code> , <code>app/views/admin</code> y <code>app/views/admin/products</code>.</p>

<p>Dentro de <code>config/routes.rb</code> agregamos:</p>

<pre><code class="language-ruby">namespace :admin do
  resources :products
end
</code></pre>

<p>Una vez tenemos la ruta vamos a crear el controlador <code>app/controllers/admin/products_controller.rb</code>:</p>

<pre><code class="language-ruby">class Admin::ProductsController &lt; ApplicationController

  def index
    @products = Product.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @products }
    end
  end

  def new
    @product = Product.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @product }
    end
  end

  def edit
    @product = Product.find(params[:id])
  end

  def create
    @product = Product.new(product_params)

    respond_to do |format|
      if @product.save
        format.html { redirect_to admin_products_url, notice: 'Producto creado.' }
        format.json { render json: @product, status: :created, location: @product }
      else
        format.html { render action: "new" }
        format.json { render json: @product.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    @product = Product.find(params[:id])

    respond_to do |format|
      if @product.update_attributes(product_params)
        format.html { redirect_to admin_products_url, notice: 'Producto actuaizado.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @product.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @product = Product.find(params[:id])
    @product.destroy

    respond_to do |format|
      format.html { redirect_to admin_products_url, notice: 'Producto eliminado.'}
      format.json { head :no_content }
    end
  end

  private
  # Never trust parameters from the scary internet, only allow the white list through.
  def product_params
    params.require(:product).permit(:name, :description, :picture, :price, :quantity)
  end
end
</code></pre>

<p>El siguiente y √∫ltimo paso es actulizar las vistas.</p>

<p>Elimin√°mos los archivos <code>app/views/products/_form.html.erb</code>, <code>app/views/products/edit.html.erb</code> y <code>app/views/products/new.html.erb</code>.</p>

<p>Creamos el archivo <code>app/views/admin/products/_form.html.erb</code>:</p>

<pre><code class="language-rhtml">&lt;%= form_for [:admin, @product] do |f| %&gt;
  &lt;% if @product.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= pluralize(@product.errors.count, "error") %&gt; prohibited this product from being saved:&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @product.errors.full_messages.each do |message| %&gt;
        &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="field"&gt;
    &lt;label&gt;Nombre:&lt;/label&gt;&lt;br&gt;
    &lt;%= f.text_field :name %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;label&gt;Descripci√≥n:&lt;/label&gt;&lt;br&gt;
    &lt;%= f.text_area :description %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;label&gt;Im√°gen:&lt;/label&gt;&lt;br&gt;
    &lt;%= f.text_field :picture %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;label&gt;Precio:&lt;/label&gt;&lt;br&gt;
    &lt;%= f.text_field :price %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;label&gt;Cantidad:&lt;/label&gt;&lt;br&gt;
    &lt;%= f.number_field :quantity %&gt;
  &lt;/div&gt;
  &lt;div class="actions"&gt;
    &lt;%= f.submit 'Guardar' %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<p>Creamos el archivo <code>app/views/admin/products/edit.html.erb</code>:</p>

<pre><code class="language-rhtml">&lt;h1&gt;Editar Producto&lt;/h1&gt;

&lt;%= render 'form' %&gt;

&lt;%= link_to 'Regresar', admin_products_path %&gt;
</code></pre>

<p>Creamos el archivo <code>app/views/admin/products/new.html.erb</code> y colocamos en el:</p>

<pre><code class="language-rhtml">&lt;h1&gt;Crear Producto&lt;/h1&gt;

&lt;%= render 'form' %&gt;

&lt;%= link_to 'Regresar', admin_products_path %&gt;
</code></pre>

<p>Creamos el archivo <code>app/views/admin/products/index.html.erb</code>:</p>

<pre><code class="language-rhtml">&lt;p id="notice"&gt;&lt;%= notice %&gt;&lt;/p&gt;

&lt;h1&gt;Listado de Productos&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Picture&lt;/th&gt;
      &lt;th&gt;Nombre&lt;/th&gt;
      &lt;th&gt;Descripci√≥n&lt;/th&gt;
      &lt;th&gt;Precio&lt;/th&gt;
      &lt;th&gt;Cantidad&lt;/th&gt;
      &lt;th colspan="3"&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;

  &lt;tbody&gt;
    &lt;% @products.each do |product| %&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;%= image_tag product.picture, width: '50' %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= product.description %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= number_to_currency product.price, precision: 0 %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= product.quantity %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= link_to 'Editar', edit_admin_product_path(product) %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= link_to 'Borrar', admin_product_path(product), method: :delete,
                        data: { confirm: 'Est√°s seguro que deseas borrar este producto?' } %&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;% end %&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;%= link_to 'Nuevo Producto', new_admin_product_path %&gt;
</code></pre>

<p>Ahora podemos ir a nuestro navegador web, usando la ruta <code>/admin/products</code>, por ejemplo, para ver una lista de productos pero poder administrarlos, la idea de hacer esto es para que haya una parte de la aplicaci√≥n encargada de la administraci√≥n y otra separada para hacer las compras, posibilitando que luego podamos a√±adir m√°s f√°cilmente permisos de acceso.</p>

<h2 id="10-registrando-usuarios-autenticaci√≥n">10. Registrando usuarios (autenticaci√≥n)</h2>

<p>Vamos a agregar una simple gema de autenticaci√≥n llamada Devise. Esta nos proporciona formularios de autenticaci√≥n y m√©todos para manejar las sesiones de usuario.</p>

<p>Lo primero que tenemos que hacer es instalar la gema. Agregamos al archivo <code>Gemfile</code> la l√≠nea:</p>

<pre><code class="language-ruby">gem 'devise'
</code></pre>

<p><strong>Info</strong>: <a href="https://github.com/plataformatec/devise">https://github.com/plataformatec/devise</a></p>

<p>Ahora instalamos la gema mediante el comando en la terminal:</p>

<pre><code>bundle install
</code></pre>

<p>Configuramos nuestro proyecto para usar Devise con:</p>

<pre><code>rails generate devise:install
</code></pre>

<p>Creamos un modelo de Devise para el administrador:</p>

<pre><code>rails generate devise Admin
</code></pre>

<p>Ahora necesitamos crear un usuario administrador en nuestra base de datos, para esto abrimos la consola de Rails escribiendo:</p>

<pre><code>rake db:migrate
</code></pre>

<p>Creamos un usuario administrador directamente en la consola de Rails:</p>

<pre><code>Admin.create(email: 'admin@tienda.com', password: 'railsgirls', password_confirmation: 'railsgirls')
</code></pre>

<p>Y en el controlador de productos para administradores (<code>app/controllers/admin/products_controller.rb</code>) le decimos que antes de hacer cualquier acci√≥n debe autenticar el administrador:</p>

<pre><code class="language-ruby">before_action :authenticate_admin!
</code></pre>

<p>Reiniciamos el servidor de Rails y vamos a la direcci√≥n <code>http://localhost:3000/admin/products</code>. Ahora nos deber√≠a pedir autenticarnos. Lo hacemos con los datos de email y password del usuario administrador creado anteriormente.</p>

<p>Modificamos la barra de navegaci√≥n del layout principal <code>app/views/layouts/header.html</code> como lo hicimos en una anterior ocasi√≥n, para agregar un enlace para cerrar la sesi√≥n:</p>

<pre><code class="language-rhtml">&lt;% if admin_signed_in? %&gt;
  &lt;ul class="nav navbar-nav navbar-right"&gt;
    &lt;li&gt;
      &lt;%= link_to "Cerrar Sesi√≥n", destroy_admin_session_path, method: :delete %&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;% end %&gt;
</code></pre>

<p>Refrescamos la p√°gina y probamos el enlace de cierre de sesi√≥n.</p>

<p>Eso es todo por ahora, esperamos que tu tienda est√© funcionando y que tengas las bases para seguir avanzando. ;)</p>

<h1 id="bonus-track">Bonus track</h1>

<h2 id="el-baile-de-github">El baile de Github</h2>

<p>¬°Ahora veremos en secuencia los pasos necesarios para subir tu primer proyecto a la plataforma Github!</p>

<ol>
  <li>En la parte superior derecha de tu espacio de trabajo en <a href="http://c9.io">C9</a>, haz clic en tu foto para abrir el panel de configuraci√≥n y clic en <code>Dashboard</code>.
<a href="https://c9.io/account/ssh">https://c9.io/account/ssh</a></li>
  <li>Ahora click en el c√≠rculo de arriba que tiene un engranaje y despu√©s en el men√∫ lateral que dice <code>SSH keys</code></li>
  <li>Copia todas las lineas que empezan por <code>ssh-rsa...</code></li>
  <li>Crea una cuenta en GitHub: <a href="https://github.com">https://github.com</a></li>
  <li>Entra en <a href="https://github.com/settings/profile">tu perfil de usuario</a> y haz clicc en <code>SSH and GPG keys</code>.
<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a></li>
  <li>Ahora Clic en ‚ÄúAdd SSH Key‚Äù. Introduce el t√≠tulo: ‚Äú C9 ‚Äú, pega la clave SSH en el cuadro ‚Äúkey‚Äù, y haz clic en ‚ÄúAdd key‚Äù.</li>
  <li>Crea un repositorio nuevo vac√≠o para tu nuevo proyecto. Desde tu repositorio, copia el enlace SSH:
    <pre><code>git@github.com:sunombre/nombredelproyecto.git
</code></pre>
  </li>
  <li>Convierte tu directorio actual en un repositorio git ejecutando en la consola de C9:
    <pre><code>git init
</code></pre>
  </li>
  <li>Utilizando el enlace SSH que copiaste en el paso 9, a√±ade el repositorio remoto como origen:
    <pre><code>git remote add origin git@github.com:sunombre/nombredelproyecto.git
</code></pre>
  </li>
  <li>A√±ade tus archivos y haz commit
    <pre><code>git add .
</code></pre>
    <pre><code>git commit -m "Mi Primer commit"
</code></pre>
  </li>
  <li>Sube los archivos:
    <pre><code>git push -u origin master
</code></pre>
  </li>
</ol>

<p><strong>Ahora tienes tu repositorio actualizado en GitHub</strong></p>

<h2 id="tener-nuestra-aplicaci√≥n-en-la-web">Tener nuestra aplicaci√≥n en la web</h2>

<p>¬øC√≥mo subir nuestra aplicaci√≥n en la web, de forma que otros puedan verla? Con un servicio llamado <a href="http://heroku.com">Heroku</a> que permite subir tu aplicaci√≥n en un servidor gratis en cuesti√≥n de segundos.</p>

<h3 id="reg√≠strate-en-heroku">Reg√≠strate en Heroku</h3>

<p><a href="https://www.heroku.com/">https://www.heroku.com/</a></p>

<h3 id="c9-ya-tiene-una-herramienta-que-se-llama-heroku-toolbelt-solo-necesitamos-actualizarla">C9 ya tiene una herramienta que se llama Heroku toolbelt. Solo necesitamos actualizarla</h3>

<pre><code class="language-bash">wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</code></pre>

<h3 id="inicia-sesi√≥n-en-heroku-desde-la-consola">Inicia sesi√≥n en Heroku desde la consola</h3>

<pre><code class="language-bash">heroku login
Email: (Introduce tu correo electr√≥nico)
Password ( Introduce tu contrase√±a - se mostrar√° en blanco y es normal )
</code></pre>

<h3 id="a√±ade-las-claves-a-heroku">A√±ade las claves a Heroku</h3>

<pre><code class="language-bash">heroku keys:add
heroku create #crea una nueva URL para la aplicaci√≥n
</code></pre>

<h3 id="a√±ade-las-nuevas-gemas-y-grupos-de-gemas-para-heroku">A√±ade las nuevas gemas y grupos de gemas para Heroku</h3>

<p><strong>/gemfile</strong></p>

<pre><code class="language-ruby">group :development, :test do
     gem 'sqlite3'
end

group :production do
     gem 'pg'
     gem 'rails_12factor'
end
</code></pre>

<p>Nota: Despu√©s de crear un grupo <code>producci√≥n</code> a tu Gemfile, debes cambiar a utilizar <code>bundle install --without production</code></p>

<h3 id="entonces-instalamos-las-gemas">Entonces instalamos las gemas</h3>

<pre><code class="language-bash">bundle install --without production
</code></pre>

<h3 id="el-baile-de-git">El baile de git</h3>

<pre><code class="language-bash">git add --all
git commit -m "¬°Lista para subir a Heroku!"
git push origin master
</code></pre>

<h3 id="sube-a-heroku">Sube a Heroku</h3>

<pre><code class="language-bash">git push heroku master
heroku open
heroku rename instagram #Reemplaza "instagram" con el nombre de tu proyecto
heroku run rake db:migrate #Para correr las migraciones
</code></pre>

<h3 id="authors">Authors</h3>

<p>Migu√©l D√≠az (miguel.diaz@codescrum.com)</p>

<p>Victor Cort√©s (ie.cortex@gmail.com)</p>
:ET